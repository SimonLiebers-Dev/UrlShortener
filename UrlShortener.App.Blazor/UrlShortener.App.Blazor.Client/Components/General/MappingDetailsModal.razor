@using UrlShortener.App.Shared.Dto

@inject TimeProvider TimeProvider

<Modal @ref="modalRef" VisibleChanged="ModalVisibleChanged">
    <ModalContent Centered>
        @if (UrlMapping != null)
        {
            <ModalHeader>
                <Column>
                    <Heading Size="HeadingSize.Is5">@UrlMapping.Name</Heading>
                    <Anchor To="@UrlMapping.ShortUrl" Class="truncate" Target="Target.Blank">@UrlMapping.ShortUrl</Anchor>
                </Column>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Table FixedHeader FixedHeaderTableHeight="500px" FixedHeaderTableMaxHeight="90vh">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>IP</TableHeaderCell>
                            <TableHeaderCell>Device Type</TableHeaderCell>
                            <TableHeaderCell>Client Type</TableHeaderCell>
                            <TableHeaderCell>Client Name</TableHeaderCell>
                            <TableHeaderCell>Os Family</TableHeaderCell>
                            <TableHeaderCell>Os Version</TableHeaderCell>
                            <TableHeaderCell>Timestamp</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var log in UrlMapping.RedirectLogs)
                        {
                            <TableRow @key="@log.Id">
                                <TableRowCell>@log.IpAddress</TableRowCell>
                                <TableRowCell>@log.DeviceType</TableRowCell>
                                <TableRowCell>@log.ClientType</TableRowCell>
                                <TableRowCell>@log.ClientName</TableRowCell>
                                <TableRowCell>@log.OsFamily</TableRowCell>
                                <TableRowCell>@log.OsVersion</TableRowCell>
                                <TableRowCell>@GetTimestampText(log)</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            </ModalFooter>
        }
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public UrlMappingDto? UrlMapping { get; set; }

    [Parameter]
    public EventCallback<UrlMappingDto?> UrlMappingChanged { get; set; }

    private Modal? modalRef;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ToggleModal();
    }

    private void ToggleModal()
    {
        if (modalRef == null)
            return;

        if (UrlMapping == null)
            HideModal();
        else
            ShowModal();
    }

    private void ShowModal()
    {
        if (modalRef == null)
            return;

        modalRef.Show();
    }

    private void HideModal()
    {
        if (modalRef == null)
            return;

        modalRef.Hide();
    }

    private void ModalVisibleChanged(bool visible)
    {
        if (!visible)
        {
            UrlMapping = null;
            UrlMappingChanged.InvokeAsync(UrlMapping);
        }
    }

    private string GetTimestampText(RedirectLogDto log)
    {
        var localDt = TimeProvider.ToLocalDateTime(log.AccessedAt);
        return localDt.ToString();
    }
}