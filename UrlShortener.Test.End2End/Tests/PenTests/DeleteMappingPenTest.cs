using System.Net;
using System.Net.Http.Json;
using UrlShortener.App.Shared.Dto;
using UrlShortener.App.Shared.Models;
using UrlShortener.Test.End2End.Base;
using UrlShortener.Test.End2End.Data;

namespace UrlShortener.Test.End2End.Tests.PenTests
{
    [TestFixture]
    public class DeleteMappingPenTest : PlayWrightFullTestBase
    {
        private HttpClient _httpClient;
        protected override List<User> TestUsers => TestData.GetDefaultTestUsers();
        protected override List<UrlMapping> TestUrlMappings => TestData.GetDefaultTestUrlMappingsForUsers();

        private string _tokenUser1 = string.Empty;
        private string _tokenUser2 = string.Empty;
        private int _createdMappingId;

        [OneTimeSetUp]
        public async Task Setup()
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(BackendTest.Url)
            };

            // Valid user 1
            var login1 = new LoginRequestDto { Email = "test@gmail.com", Password = "TestPassword" };
            var response1 = await _httpClient.PostAsJsonAsync("/api/auth/login", login1);
            var body1 = await response1.Content.ReadFromJsonAsync<LoginResponseDto>();
            _tokenUser1 = body1?.Token ?? throw new Exception($"Login failed for {login1.Email}");

            // Valid user 2
            var login2 = new LoginRequestDto { Email = "test2@gmail.com", Password = "TestPassword2" };
            var response2 = await _httpClient.PostAsJsonAsync("/api/auth/login", login2);
            var body2 = await response2.Content.ReadFromJsonAsync<LoginResponseDto>();
            _tokenUser2 = body2?.Token ?? throw new Exception($"Login failed for {login2.Email}");

            var mappingName = $"mapping_{Guid.NewGuid():N}";
            var createRequest = new CreateMappingRequestDto
            {
                Name = mappingName,
                LongUrl = "https://example.com"
            };

            // Create mapping for testing
            var request = new HttpRequestMessage(HttpMethod.Post, new Uri("/api/mappings/create", UriKind.Relative))
            {
                Content = JsonContent.Create(createRequest)
            };
            request.Headers.Authorization = new("Bearer", _tokenUser1);
            var createResponse = await _httpClient.SendAsync(request);

            if (!createResponse.IsSuccessStatusCode)
            {
                throw new Exception("Create mapping for testing failed");
            }

            // Get all mappings of user
            var mappingsRequest = new HttpRequestMessage(HttpMethod.Get, new Uri("/api/mappings/all", UriKind.Relative));
            mappingsRequest.Headers.Authorization = new("Bearer", _tokenUser1);
            var mappingsResponse = await _httpClient.SendAsync(mappingsRequest);
            var mappings = await mappingsResponse.Content.ReadFromJsonAsync<List<UrlMappingDto>>();

            // Get created mapping from all mappings of user
            var targetMapping = (mappings?.FirstOrDefault(m => m.Name != null && m.Name.Equals(mappingName))) ?? throw new Exception("Target mapping not found");
            _createdMappingId = targetMapping.Id;
        }

        [Test]
        public async Task DeleteMapping_WithValidIdAndOwner_ShouldSucceed()
        {
            var response = await _httpClient.SendAsync(CreateDeleteRequest(_createdMappingId, _tokenUser1));
            var body = await response.Content.ReadAsStringAsync();

            Assert.Multiple(() =>
            {
                Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
                Assert.That(body, Does.Contain("Successfully"));
            });
        }

        [Test]
        public async Task DeleteMapping_WithInvalidToken_ShouldBeUnauthorized()
        {
            var request = new HttpRequestMessage(HttpMethod.Delete, new Uri($"/api/mappings/{_createdMappingId}", UriKind.Relative));
            request.Headers.Authorization = new("Bearer", "invalid.token");
            var response = await _httpClient.SendAsync(request);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task DeleteMapping_AsWrongUser_ShouldFail()
        {
            var response = await _httpClient.SendAsync(CreateDeleteRequest(_createdMappingId, _tokenUser2));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest));
        }

        [Test]
        public async Task DeleteMapping_WithNegativeId_ShouldReturnBadRequest()
        {
            var response = await _httpClient.SendAsync(CreateDeleteRequest(-5, _tokenUser1));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest).Or.EqualTo(HttpStatusCode.NotFound));
        }

        [Test]
        public async Task DeleteMapping_WithExcessiveId_ShouldNotCrash()
        {
            var response = await _httpClient.SendAsync(CreateDeleteRequest(int.MaxValue, _tokenUser1));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest)
                       .Or.EqualTo(HttpStatusCode.NotFound));
        }

        [Test]
        public async Task DeleteMapping_WithSqlInjectionString_ShouldReturnNotFoundOrBadRequest()
        {
            var request = new HttpRequestMessage(HttpMethod.Delete, new Uri("/api/mappings/1%20OR%201=1", UriKind.Relative));
            request.Headers.Authorization = new("Bearer", _tokenUser1);
            var response = await _httpClient.SendAsync(request);

            Assert.That((int)response.StatusCode, Is.LessThan(500));
        }

        private static HttpRequestMessage CreateDeleteRequest(int id, string token)
        {
            var uri = new Uri($"/api/mappings/{id}", UriKind.Relative);
            var request = new HttpRequestMessage(HttpMethod.Delete, uri);
            request.Headers.Authorization = new("Bearer", token);
            return request;
        }

        [OneTimeTearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }
    }
}
