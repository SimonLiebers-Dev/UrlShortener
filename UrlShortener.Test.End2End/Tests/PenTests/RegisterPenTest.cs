using System.Net;
using System.Net.Http.Json;
using UrlShortener.App.Shared.Dto;
using UrlShortener.App.Shared.Models;
using UrlShortener.Test.End2End.Base;
using UrlShortener.Test.End2End.Data;

namespace UrlShortener.Test.End2End.Tests.PenTests
{
    [TestFixture]
    public class RegisterPenTest : PlayWrightFullTestBase
    {
        private HttpClient _httpClient;
        protected override List<User> TestUsers => TestData.GetDefaultTestUsers();

        [OneTimeSetUp]
        public void Setup()
        {
            _httpClient = new HttpClient()
            {
                BaseAddress = new Uri(BackendTest.Url)
            };
        }

        [Test]
        public async Task Register_ShouldFail_WhenEmailAlreadyExists()
        {
            // Arrange
            var request = new RegisterRequestDto { Email = "test@gmail.com", Password = "ValidPass123!" };

            // Act
            // Try to register with already registered email -> Contained in TestUsers
            var secondResponse = await _httpClient.PostAsJsonAsync("/api/auth/register", request);

            // Assert
            Assert.That(secondResponse.StatusCode, Is.EqualTo(HttpStatusCode.Conflict));
        }

        [TestCase("plainaddress")]
        [TestCase("user@@domain.com")]
        public async Task Register_ShouldFail_WhenEmailFormatIsInvalid(string invalidEmail)
        {
            // Arrange
            var request = new RegisterRequestDto
            {
                Email = invalidEmail,
                Password = "TestPassword123!"
            };

            // Act
            var response = await _httpClient.PostAsJsonAsync("/api/auth/register", request);

            // Assert
            Assert.That(response.IsSuccessStatusCode, Is.False);
        }

        [OneTimeTearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }
    }
}
