using System.Net;
using System.Net.Http.Json;
using UrlShortener.App.Shared.Dto;
using UrlShortener.App.Shared.Models;
using UrlShortener.Test.End2End.Base;
using UrlShortener.Test.End2End.Data;

namespace UrlShortener.Test.End2End.Tests.PenTests
{
    [TestFixture]
    public class GetStatsPenTest : PlayWrightFullTestBase
    {
        private HttpClient _httpClient;
        protected override List<User> TestUsers => TestData.GetDefaultTestUsers();
        protected override List<UrlMapping> TestUrlMappings => TestData.GetDefaultTestUrlMappingsForUsers();

        private readonly Dictionary<string, string> _tokenByEmail = [];

        [OneTimeSetUp]
        public async Task Setup()
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(BackendTest.Url)
            };

            // Valid user 1
            var login1 = new LoginRequestDto { Email = "test@gmail.com", Password = "TestPassword" };
            var response1 = await _httpClient.PostAsJsonAsync("/api/auth/login", login1);
            var body1 = await response1.Content.ReadFromJsonAsync<LoginResponseDto>();
            if (body1?.Token == null)
            {
                throw new Exception($"Login failed for {login1.Email}");
            }
            _tokenByEmail[login1.Email] = body1.Token;

            // Valid user 2
            var login2 = new LoginRequestDto { Email = "test2@gmail.com", Password = "TestPassword2" };
            var response2 = await _httpClient.PostAsJsonAsync("/api/auth/login", login2);
            var body2 = await response2.Content.ReadFromJsonAsync<LoginResponseDto>();
            if (body2?.Token == null)
            {
                throw new Exception($"Login failed for {login2.Email}");
            }
            _tokenByEmail[login2.Email] = body2.Token;
        }

        [Test]
        public async Task GetStats_WithValidToken_ShouldSucceed()
        {
            foreach (var kvp in _tokenByEmail)
            {
                var response = await _httpClient.SendAsync(CreateGetStatsRequest(kvp.Value));

                Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
            }
        }

        [Test]
        public async Task GetStats_WithInvalidToken_ShouldReturnUnauthorized()
        {
            var response = await _httpClient.SendAsync(CreateGetStatsRequest("invalid.token"));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task GetStats_WithoutToken_ShouldReturnUnauthorized()
        {
            var response = await _httpClient.SendAsync(CreateGetStatsRequest());
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task GetStats_UsingSQLInjectionInToken_ShouldReturnUnauthorized()
        {
            var response = await _httpClient.SendAsync(CreateGetStatsRequest("'; DROP TABLE users;--"));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        private static HttpRequestMessage CreateGetStatsRequest(string? token = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, new Uri("/api/mappings/stats", UriKind.Relative));
            if (token != null)
            {
                request.Headers.Authorization = new("Bearer", token);
            }
            return request;
        }

        [OneTimeTearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }
    }
}
