using System.Net;
using System.Net.Http.Json;
using UrlShortener.App.Shared.Dto;
using UrlShortener.App.Shared.Models;
using UrlShortener.Test.End2End.Base;
using UrlShortener.Test.End2End.Data;

namespace UrlShortener.Test.End2End.Tests.PenTests
{
    [TestFixture]
    public class CreateMappingPenTest : PlayWrightFullTestBase
    {
        private HttpClient _httpClient;
        protected override List<User> TestUsers => TestData.GetDefaultTestUsers();

        private string _token = string.Empty;

        [OneTimeSetUp]
        public async Task Setup()
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(BackendTest.Url)
            };

            var loginRequest = new LoginRequestDto
            {
                Email = "test@gmail.com",
                Password = "TestPassword"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", loginRequest);
            var body = await response.Content.ReadFromJsonAsync<LoginResponseDto>();

            _token = body?.Token ?? throw new Exception("Could not authenticate.");
        }

        [Test]
        public async Task CreateMapping_WithValidInput_ShouldSucceed()
        {
            var payload = new CreateMappingRequestDto
            {
                Name = $"test_{Guid.NewGuid():N}",
                LongUrl = "https://example.com"
            };

            var response = await _httpClient.SendAsync(CreatePostWithAuth(payload));
            var content = await response.Content.ReadFromJsonAsync<CreateMappingResponseDto>();

            Assert.Multiple(() =>
            {
                Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
                Assert.That(content?.ShortUrl, Is.Not.Null.And.Contains("/"));
            });
        }

        [Test]
        public async Task CreateMapping_WithoutAuth_ShouldFail()
        {
            var payload = new CreateMappingRequestDto
            {
                Name = "noauth",
                LongUrl = "https://example.com"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/mappings/create", payload);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task CreateMapping_WithEmptyName_ShouldReturnBadRequest()
        {
            var payload = new CreateMappingRequestDto
            {
                Name = "",
                LongUrl = "https://example.com"
            };

            var response = await _httpClient.SendAsync(CreatePostWithAuth(payload));

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest));
        }

        [Test]
        public async Task CreateMapping_WithEmptyUrl_ShouldReturnBadRequest()
        {
            var payload = new CreateMappingRequestDto
            {
                Name = "EmptyUrlTest",
                LongUrl = ""
            };

            var response = await _httpClient.SendAsync(CreatePostWithAuth(payload));

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest));
        }

        [Test]
        public async Task CreateMapping_WithScriptInName_ShouldBeHandled()
        {
            var payload = new CreateMappingRequestDto
            {
                Name = "<script>Test</script>",
                LongUrl = "https://example.com"
            };

            var response = await _httpClient.SendAsync(CreatePostWithAuth(payload));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
        }

        [Test]
        public async Task CreateMapping_WithLongInputs_ShouldNotCrash()
        {
            var longString = new string('A', 10000);

            var payload = new CreateMappingRequestDto
            {
                Name = longString,
                LongUrl = "https://example.com"
            };

            var response = await _httpClient.SendAsync(CreatePostWithAuth(payload));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK)
                       .Or.EqualTo(HttpStatusCode.BadRequest));
        }

        [Test]
        public async Task CreateMapping_WithInvalidUrl_ShouldBeHandled()
        {
            var payload = new CreateMappingRequestDto
            {
                Name = "Test",
                LongUrl = "not-a-url"
            };

            var response = await _httpClient.SendAsync(CreatePostWithAuth(payload));
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK)
                       .Or.EqualTo(HttpStatusCode.BadRequest));
        }

        [OneTimeTearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }

        private HttpRequestMessage CreatePostWithAuth(object payload)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "/api/mappings/create");
            request.Content = JsonContent.Create(payload);
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _token);
            return request;
        }
    }
}
