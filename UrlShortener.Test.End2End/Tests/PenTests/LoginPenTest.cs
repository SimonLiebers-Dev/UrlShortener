using System.Net.Http.Json;
using System.Net;
using UrlShortener.App.Shared.Dto;
using UrlShortener.App.Shared.Models;
using UrlShortener.Test.End2End.Base;
using UrlShortener.Test.End2End.Data;

namespace UrlShortener.Test.End2End.Tests.PenTests
{
    [TestFixture]
    public class LoginPenTest : PlayWrightFullTestBase
    {
        private HttpClient _httpClient;

        protected override List<User> TestUsers => TestData.GetDefaultTestUsers();

        [OneTimeSetUp]
        public void Setup()
        {
            _httpClient = new HttpClient()
            {
                BaseAddress = new Uri(BackendTest.Url)
            };
        }

        [Test]
        public async Task Login_WithValidCredentials_ShouldReturnToken()
        {
            var request = new LoginRequestDto
            {
                Email = "test@gmail.com",
                Password = "TestPassword"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);
            var content = await response.Content.ReadFromJsonAsync<LoginResponseDto>();

            Assert.Multiple(() =>
            {
                Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
                Assert.That(content?.Token, Is.Not.Null.And.Not.Empty);
            });
        }

        [Test]
        public async Task Login_WithInvalidPassword_ShouldReturnUnauthorized()
        {
            var request = new LoginRequestDto
            {
                Email = "test@gmail.com",
                Password = "wrongpassword"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task Login_WithInvalidEmail_ShouldReturnUnauthorized()
        {
            var request = new LoginRequestDto
            {
                Email = "notexist@example.com",
                Password = "Test1234"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task Login_WithSqlInjection_ShouldReturnUnauthorized_AndNot500()
        {
            var request = new LoginRequestDto
            {
                Email = "' OR '1'='1",
                Password = "' OR '1'='1"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);

            Assert.Multiple(() =>
            {
                Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
                Assert.That(response.IsSuccessStatusCode, Is.False);
            });
        }

        [Test]
        public async Task Login_WithLongInput_ShouldReturnUnauthorizedOrBadRequest()
        {
            var longString = new string('A', 10000);

            var request = new LoginRequestDto
            {
                Email = longString,
                Password = longString
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized)
                                               .Or.EqualTo(HttpStatusCode.BadRequest));
        }

        [Test]
        public async Task Login_WithEmptyFields_ShouldReturnBadRequestOrUnauthorized()
        {
            var request = new LoginRequestDto
            {
                Email = "",
                Password = ""
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.BadRequest)
                                               .Or.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task Login_WithEmojiAndUnicode_ShouldNotThrow()
        {
            var request = new LoginRequestDto
            {
                Email = "🔥@example.com",
                Password = "🧠💥"
            };

            var response = await _httpClient.PostAsJsonAsync("/api/auth/login", request);

            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task Login_ShouldReturnSameError_ForEmailAndPasswordMistakes()
        {
            var wrongPasswordRequest = new LoginRequestDto
            {
                Email = "test@gmail.com",
                Password = "wrong"
            };

            var wrongEmailRequest = new LoginRequestDto
            {
                Email = "notexist@example.com",
                Password = "Test1234"
            };

            var response1 = await _httpClient.PostAsJsonAsync("/api/auth/login", wrongPasswordRequest);
            var response2 = await _httpClient.PostAsJsonAsync("/api/auth/login", wrongEmailRequest);

            var body1 = await response1.Content.ReadAsStringAsync();
            var body2 = await response2.Content.ReadAsStringAsync();

            Assert.Multiple(() =>
            {
                Assert.That(response1.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
                Assert.That(response2.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
                Assert.That(body1, Is.EqualTo(body2), "Error messages should not leak which field was wrong");
            });
        }

        [OneTimeTearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }
    }
}
