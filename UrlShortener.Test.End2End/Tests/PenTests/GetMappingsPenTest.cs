using System.Net;
using System.Net.Http.Json;
using UrlShortener.App.Shared.Dto;
using UrlShortener.App.Shared.Models;
using UrlShortener.Test.End2End.Base;
using UrlShortener.Test.End2End.Data;

namespace UrlShortener.Test.End2End.Tests.PenTests
{
    [TestFixture]
    public class GetMappingsPenTest : PlayWrightFullTestBase
    {
        private HttpClient _httpClient;
        protected override List<User> TestUsers => TestData.GetDefaultTestUsers();
        protected override List<UrlMapping> TestUrlMappings => TestData.GetDefaultTestUrlMappingsForUsers();

        private string _tokenUser1 = string.Empty;
        private string _tokenUser2 = string.Empty;

        [OneTimeSetUp]
        public async Task Setup()
        {
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri(BackendTest.Url)
            };

            // Valid user 1
            var login1 = new LoginRequestDto { Email = "test@gmail.com", Password = "TestPassword" };
            var response1 = await _httpClient.PostAsJsonAsync("/api/auth/login", login1);
            var body1 = await response1.Content.ReadFromJsonAsync<LoginResponseDto>();
            _tokenUser1 = body1?.Token ?? throw new Exception($"Login failed for {login1.Email}");

            // Valid user 2
            var login2 = new LoginRequestDto { Email = "test2@gmail.com", Password = "TestPassword2" };
            var response2 = await _httpClient.PostAsJsonAsync("/api/auth/login", login2);
            var body2 = await response2.Content.ReadFromJsonAsync<LoginResponseDto>();
            _tokenUser2 = body2?.Token ?? throw new Exception($"Login failed for {login2.Email}");
        }

        [Test]
        public async Task GetMappings_WithValidToken_ShouldSucceed()
        {
            // Arrange
            var response = await _httpClient.SendAsync(CreateAuthRequest(_tokenUser1));

            // Act
            var body = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Multiple(() =>
            {
                Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));
                Assert.That(body, Is.Not.Null);
            });
        }

        [Test]
        public async Task GetMappings_WithoutToken_ShouldBeUnauthorized()
        {
            // Arrange
            var uri = new Uri("/api/mappings/all", UriKind.Relative);

            // Act
            var response = await _httpClient.GetAsync(uri);

            // Assert
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task GetMappings_WithFakeToken_ShouldBeUnauthorized()
        {
            // Arrange
            var uri = new Uri("/api/mappings/all", UriKind.Relative);
            var fakeToken = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.Fake.Payload.Signature";
            var req = new HttpRequestMessage(HttpMethod.Get, uri);
            req.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", fakeToken);

            // Act
            var response = await _httpClient.SendAsync(req);

            // Assert
            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.Unauthorized));
        }

        [Test]
        public async Task GetMappings_ShouldReturnOnlyOwnMappings()
        {
            // Act
            var user1Response = await _httpClient.SendAsync(CreateAuthRequest(_tokenUser1));
            var mappings1 = await user1Response.Content.ReadAsStringAsync();

            var user2Response = await _httpClient.SendAsync(CreateAuthRequest(_tokenUser2));
            var mappings2 = await user2Response.Content.ReadAsStringAsync();

            // Assert
            Assert.That(mappings1, Is.Not.EqualTo(mappings2));
        }

        [Test]
        public async Task GetMappings_WithScriptInTokenHeader_ShouldNotBreak()
        {
            // Arrange
            var request = new HttpRequestMessage(HttpMethod.Get, new Uri("/api/mappings/all", UriKind.Relative));
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _tokenUser1);
            request.Headers.Add("X-User", "<script>alert(1)</script>"); // simulate attack via headers

            // Act
            var response = await _httpClient.SendAsync(request);

            // Assert
            Assert.That((int)response.StatusCode, Is.LessThan(500));
        }

        [OneTimeTearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }

        private static HttpRequestMessage CreateAuthRequest(string token)
        {
            var req = new HttpRequestMessage(HttpMethod.Get, new Uri("/api/mappings/all", UriKind.Relative));
            req.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            return req;
        }
    }
}
