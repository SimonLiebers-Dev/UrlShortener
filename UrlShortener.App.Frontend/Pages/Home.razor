@page "/"

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using UrlShortener.App.Frontend.Business
@using UrlShortener.App.Shared.DTO

@inject IMappingsService MappingsService
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager

<div class="cards-wrapper">
    <div class="cards-stack">
        @if (userStats != null)
        {
            <Card>
                <CardBody>
                    <CardTitle Size="4">Stats</CardTitle>
                    <Span>Clicks: @userStats.Clicks</Span>
                    <Span>Mappings: @userStats.Mappings</Span>
                </CardBody>
            </Card>
        }
        <Card>
            <CardBody>
                <CardTitle Size="4">Create url</CardTitle>
                <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                    <Validation Validator="@ValidateName">
                        <Field>
                            <FieldLabel Padding="Padding.Is0" Style="white-space: nowrap;" RequiredIndicator ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Name</FieldLabel>
                            <FieldBody Padding="Padding.Is0" ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                <TextEdit @bind-Text="name" Placeholder="Enter name">
                                    <Feedback>
                                        <ValidationError>Enter a name</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidateUrl">
                        <Field>
                            <FieldLabel Padding="Padding.Is0" Style="white-space: nowrap;" RequiredIndicator ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Long url</FieldLabel>
                            <FieldBody Padding="Padding.Is0" ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                <TextEdit Placeholder="Long url" @bind-Text="@longUrl">
                                    <Feedback>
                                        <ValidationError>Enter a valid url starting with https/http</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
                <div class="btn-wrapper">
                    <Button Style="flex: 1 0 0; justify-content: center;"
                            Color="Color.Primary"
                            Clicked="CreateMapping">
                        Generate Short Url
                    </Button>
                </div>
            </CardBody>
        </Card>
    </div>
</div>

@code {
    Validations? validations;

    private UserStatsDTO? userStats;

    private string longUrl = string.Empty;
    private string name = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ReloadUserStats();
    }

    private async Task ReloadUserStats()
    {
        userStats = await MappingsService.GetStats();
        this.StateHasChanged();
    }

    private async Task CreateMapping()
    {
        if (validations == null)
            return;

        var valid = await validations.ValidateAll();
        if (valid)
        {
            var shortUrl = await MappingsService.CreateMapping(longUrl, name);
            if (shortUrl == null)
            {
                await NotificationService.Error("Short url could not be generated. Please try again later.");
                return;
            }

            await NotificationService.Success("Successfully created url");
            await ReloadUserStats();
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private void ValidateName(ValidatorEventArgs e)
    {
        e.Status = Convert.ToString(e.Value)?.Length > 0 ? ValidationStatus.Success : ValidationStatus.Error;
    }

    private void ValidateUrl(ValidatorEventArgs e)
    {
        string pattern = @"^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$";
        var value = Convert.ToString(e.Value);

        if (value == null)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            Regex urlRegex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
            bool isMatch = urlRegex.IsMatch(value);
            e.Status = isMatch ? ValidationStatus.Success : ValidationStatus.Error;
        }
    }
}