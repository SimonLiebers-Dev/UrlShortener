@page "/register"

@layout RootLayout

@using UrlShortener.App.Frontend.Business
@using UrlShortener.App.Shared.Dto

@inject IAuthService AuthService
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<div class="card-wrapper">
    <div class="card-outer-wrapper">
        <Card Margin="Margin.Is4.OnY">
            <div class="card-inner">
                <CardHeader Padding="Padding.Is0">
                    <CardTitle>Register</CardTitle>
                </CardHeader>
                <CardBody Padding="Padding.Is0">
                    <Validations @ref="validations" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                        <Validation Validator="@ValidationRule.IsEmail">
                            <Field>
                                <FieldLabel Padding="Padding.Is0" Style="white-space: nowrap;" RequiredIndicator ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Email address</FieldLabel>
                                <FieldBody Padding="Padding.Is0" ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                    <TextEdit @bind-Text="RegisterEmail" Placeholder="Enter email">
                                        <Feedback>
                                            <ValidationError>Enter a valid email</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidatePassword">
                            <Field>
                                <FieldLabel Padding="Padding.Is0" Style="white-space: nowrap;" RequiredIndicator ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Password</FieldLabel>
                                <FieldBody Padding="Padding.Is0" ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                    <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@RegisterPassword">
                                        <Feedback>
                                            <ValidationError>Password must be at least 6 characters long</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="@ValidatePasswordRetype">
                            <Field>
                                <FieldLabel Padding="Padding.Is0" Style="white-space: nowrap;" RequiredIndicator ColumnSize="ColumnSize.IsFull.OnTablet.Is3.OnDesktop">Retype Password</FieldLabel>
                                <FieldBody Padding="Padding.Is0" ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">

                                    <TextEdit Role="TextRole.Password" Placeholder="Retype password">
                                        <Feedback>
                                            <ValidationError>Password does not match</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Validations>
                    <div class="btn-wrapper">
                        <Button Style="flex: 1 0 0; justify-content: center;"
                                Color="Color.Primary"
                                Clicked="RegisterUser">
                            Register
                        </Button>
                        <Button Style="flex: 1 0 0; justify-content: center;"
                                Color="Color.Secondary"
                                Clicked="ToLogin">
                            Login
                        </Button>
                    </div>
                </CardBody>
            </div>
        </Card>
    </div>
</div>

@code {
    private Validations? validations;

    private string RegisterEmail = string.Empty;
    private string RegisterPassword = string.Empty;

    private async Task RegisterUser()
    {
        if (validations == null)
            return;

        //Validate all inputs
        var valid = await validations.ValidateAll();
        if (!valid)
            return;

        // Register user
        var response = await AuthService.Register(RegisterEmail, RegisterPassword);

        if (response == null)
        {
            await NotificationService.Error("Something went wrong. Please try again later.");
            return;
        }

        // Navigate to login on success, otherwise display notification
        if (response.Success)
            ToLogin();
        else
        {
            if (response.ErrorType == RegisterErrorType.EmailAlreadyExists)
            {
                await NotificationService.Error("Email already exists.");
            }
            else if (response.ErrorType == RegisterErrorType.MissingEmailOrPassword)
            {
                await NotificationService.Error("Please provide email and password.");
            }
        }
    }

    private void ValidatePassword(ValidatorEventArgs e)
    {
        e.Status = Convert.ToString(e.Value)?.Length >= 6 ? ValidationStatus.Success : ValidationStatus.Error;
    }

    private void ValidatePasswordRetype(ValidatorEventArgs e)
    {
        var retypedPassword = Convert.ToString(e.Value);

        if (retypedPassword?.Length < 6)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Password must be at least 6 characters long!";
        }
        else if (retypedPassword != RegisterPassword)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private void ToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}