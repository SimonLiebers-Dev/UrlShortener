{
  "api/UrlShortener.App.Backend.AppDbContext.html": {
    "href": "api/UrlShortener.App.Backend.AppDbContext.html",
    "title": "Class AppDbContext | UrlShortener",
    "summary": "Class AppDbContext Namespace UrlShortener.App.Backend Assembly UrlShortener.App.Backend.dll public class AppDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppDbContext(DbContextOptions<AppDbContext>) public AppDbContext(DbContextOptions<AppDbContext> options) Parameters options DbContextOptions<AppDbContext> Properties RedirectLogs public virtual DbSet<RedirectLog> RedirectLogs { get; set; } Property Value DbSet<RedirectLog> UrlMappings public virtual DbSet<UrlMapping> UrlMappings { get; set; } Property Value DbSet<UrlMapping> Users public virtual DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/UrlShortener.App.Backend.Business.IJwtTokenGenerator.html": {
    "href": "api/UrlShortener.App.Backend.Business.IJwtTokenGenerator.html",
    "title": "Interface IJwtTokenGenerator | UrlShortener",
    "summary": "Interface IJwtTokenGenerator Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll public interface IJwtTokenGenerator Methods GenerateToken(string) Generates a JWT token for the given email. string GenerateToken(string email) Parameters email string Email Returns string JWT token"
  },
  "api/UrlShortener.App.Backend.Business.IMappingsService.html": {
    "href": "api/UrlShortener.App.Backend.Business.IMappingsService.html",
    "title": "Interface IMappingsService | UrlShortener",
    "summary": "Interface IMappingsService Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll public interface IMappingsService Methods CreateMapping(string, string, string) Create a new mapping for a long URL Task<UrlMapping?> CreateMapping(string longUrl, string name, string email) Parameters longUrl string Long url name string Name of mapping email string Email of user Returns Task<UrlMapping> DeleteMapping(string, int) Delete a mapping of a user by its id Task<bool> DeleteMapping(string email, int mappingId) Parameters email string Email of the user mappingId int Id of the mapping Returns Task<bool> True, if it was successfully deleted GetMappingByPath(string) Get a mapping by its short url path Task<UrlMapping?> GetMappingByPath(string path) Parameters path string Path Returns Task<UrlMapping> UrlMapping with matching path GetMappingsByUser(string) Get all mappings of a user Task<List<UrlMapping>?> GetMappingsByUser(string email) Parameters email string Email of the user Returns Task<List<UrlMapping>> All mappings found"
  },
  "api/UrlShortener.App.Backend.Business.IRedirectLogService.html": {
    "href": "api/UrlShortener.App.Backend.Business.IRedirectLogService.html",
    "title": "Interface IRedirectLogService | UrlShortener",
    "summary": "Interface IRedirectLogService Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll public interface IRedirectLogService Methods LogRedirectAsync(UrlMapping, UserAgentApiResponse?, string?, string?) Log a redirect Task LogRedirectAsync(UrlMapping urlMapping, UserAgentApiResponse? userAgentApiResponse, string? ipAddress, string? userAgent) Parameters urlMapping UrlMapping UrlMapping to create log for userAgentApiResponse UserAgentApiResponse User agent data of the user ipAddress string Ip address of the user userAgent string UserAgent of the users browser Returns Task"
  },
  "api/UrlShortener.App.Backend.Business.IUserAgentService.html": {
    "href": "api/UrlShortener.App.Backend.Business.IUserAgentService.html",
    "title": "Interface IUserAgentService | UrlShortener",
    "summary": "Interface IUserAgentService Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll public interface IUserAgentService Methods GetUserAgentAsync(string) Get user agent information Task<UserAgentApiResponse?> GetUserAgentAsync(string userAgent) Parameters userAgent string UserAgent string from the users browser Returns Task<UserAgentApiResponse> Parsed data"
  },
  "api/UrlShortener.App.Backend.Business.html": {
    "href": "api/UrlShortener.App.Backend.Business.html",
    "title": "Namespace UrlShortener.App.Backend.Business | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Business Interfaces IJwtTokenGenerator IMappingsService IRedirectLogService IUserAgentService"
  },
  "api/UrlShortener.App.Backend.Controllers.AuthController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.AuthController.html",
    "title": "Class AuthController | UrlShortener",
    "summary": "Class AuthController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll [Route(\"api/auth\")] [ApiController] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthController(IJwtTokenGenerator, AppDbContext) public AuthController(IJwtTokenGenerator JwtTokenGenerator, AppDbContext DbContext) Parameters JwtTokenGenerator IJwtTokenGenerator DbContext AppDbContext Methods Login(LoginRequestDto) Login endpoint to authenticate a user and return a JWT token. [HttpPost(\"login\")] public IActionResult Login(LoginRequestDto request) Parameters request LoginRequestDto The login request containing email and password. Returns IActionResult A JWT token if authentication is successful, otherwise an Unauthorized error. Register(RegisterRequestDto) Register a new user. [HttpPost(\"register\")] public Task<IActionResult> Register(RegisterRequestDto request) Parameters request RegisterRequestDto The registration request containing email and password. Returns Task<IActionResult> Response indicating success or failure of registration."
  },
  "api/UrlShortener.App.Backend.Controllers.HealthCheckController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.HealthCheckController.html",
    "title": "Class HealthCheckController | UrlShortener",
    "summary": "Class HealthCheckController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll [ApiController] [Route(\"api/health\")] public class HealthCheckController : ControllerBase Inheritance object ControllerBase HealthCheckController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get() [HttpGet] public IActionResult Get() Returns IActionResult"
  },
  "api/UrlShortener.App.Backend.Controllers.MappingsController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.MappingsController.html",
    "title": "Class MappingsController | UrlShortener",
    "summary": "Class MappingsController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll [ApiController] [Route(\"api/mappings\")] [Authorize] public class MappingsController : ControllerBase Inheritance object ControllerBase MappingsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappingsController(IMappingsService) public MappingsController(IMappingsService MappingsService) Parameters MappingsService IMappingsService Methods CreateMapping(CreateMappingRequestDto) Creates a new URL mapping (shortens a URL). [HttpPost(\"create\")] public Task<IActionResult> CreateMapping(CreateMappingRequestDto createMappingRequest) Parameters createMappingRequest CreateMappingRequestDto Request containing the long URL and a name for the mapping. Returns Task<IActionResult> The shortened URL. DeleteMapping(int) Deletes a specific URL mapping. [HttpDelete(\"{mappingId}\")] public Task<IActionResult> DeleteMapping(int mappingId) Parameters mappingId int The ID of the mapping to delete. Returns Task<IActionResult> A success or failure message. GetMappings() Retrieves all URL mappings for the authenticated user. [HttpGet(\"all\")] public Task<IActionResult> GetMappings() Returns Task<IActionResult> A list of the user's URL mappings. GetStats() Retrieves user statistics, including total mappings and clicks. [HttpGet(\"stats\")] public Task<IActionResult> GetStats() Returns Task<IActionResult> User statistics."
  },
  "api/UrlShortener.App.Backend.Controllers.RedirectController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.RedirectController.html",
    "title": "Class RedirectController | UrlShortener",
    "summary": "Class RedirectController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll [ApiController] [Route(\"/\")] [AllowAnonymous] public class RedirectController : ControllerBase Inheritance object ControllerBase RedirectController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RedirectController(IMappingsService, IRedirectLogService, IUserAgentService) public RedirectController(IMappingsService MappingsService, IRedirectLogService RedirectLogService, IUserAgentService UserAgentService) Parameters MappingsService IMappingsService RedirectLogService IRedirectLogService UserAgentService IUserAgentService Methods RedirectToLongUrl(string) Redirects a short URL to its original long URL. [HttpGet(\"{path}\")] public Task<IActionResult> RedirectToLongUrl(string path) Parameters path string The short URL path. Returns Task<IActionResult> A redirect response to the original long URL."
  },
  "api/UrlShortener.App.Backend.Controllers.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.html",
    "title": "Namespace UrlShortener.App.Backend.Controllers | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Controllers Classes AuthController HealthCheckController MappingsController RedirectController"
  },
  "api/UrlShortener.App.Backend.Middleware.DelayMiddleware.html": {
    "href": "api/UrlShortener.App.Backend.Middleware.DelayMiddleware.html",
    "title": "Class DelayMiddleware | UrlShortener",
    "summary": "Class DelayMiddleware Namespace UrlShortener.App.Backend.Middleware Assembly UrlShortener.App.Backend.dll Middleware to introduce a delay for authentication requests. public class DelayMiddleware : IMiddleware Inheritance object DelayMiddleware Implements IMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelayMiddleware(ILogger<DelayMiddleware>) Middleware to introduce a delay for authentication requests. public DelayMiddleware(ILogger<DelayMiddleware> logger) Parameters logger ILogger<DelayMiddleware> Logger Methods InvokeAsync(HttpContext, RequestDelegate) Request handling method. public Task InvokeAsync(HttpContext context, RequestDelegate next) Parameters context HttpContext The HttpContext for the current request. next RequestDelegate The delegate representing the remaining middleware in the request pipeline. Returns Task A Task that represents the execution of this middleware."
  },
  "api/UrlShortener.App.Backend.Middleware.html": {
    "href": "api/UrlShortener.App.Backend.Middleware.html",
    "title": "Namespace UrlShortener.App.Backend.Middleware | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Middleware Classes DelayMiddleware Middleware to introduce a delay for authentication requests."
  },
  "api/UrlShortener.App.Backend.Migrations.InitialMigration.html": {
    "href": "api/UrlShortener.App.Backend.Migrations.InitialMigration.html",
    "title": "Class InitialMigration | UrlShortener",
    "summary": "Class InitialMigration Namespace UrlShortener.App.Backend.Migrations Assembly UrlShortener.App.Backend.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20250409151853_InitialMigration\")] public class InitialMigration : Migration Inheritance object Migration InitialMigration Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/UrlShortener.App.Backend.Migrations.html": {
    "href": "api/UrlShortener.App.Backend.Migrations.html",
    "title": "Namespace UrlShortener.App.Backend.Migrations | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Migrations Classes InitialMigration A base class inherited by each EF Core migration."
  },
  "api/UrlShortener.App.Backend.Models.UserAgentApiResponse.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentApiResponse.html",
    "title": "Class UserAgentApiResponse | UrlShortener",
    "summary": "Class UserAgentApiResponse Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll public class UserAgentApiResponse Inheritance object UserAgentApiResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BrowserFamily [JsonPropertyName(\"browser_family\")] public string BrowserFamily { get; set; } Property Value string Client [JsonPropertyName(\"client\")] public UserAgentClient? Client { get; set; } Property Value UserAgentClient Device [JsonPropertyName(\"device\")] public UserAgentDevice? Device { get; set; } Property Value UserAgentDevice Os [JsonPropertyName(\"os\")] public UserAgentOs? Os { get; set; } Property Value UserAgentOs OsFamily [JsonPropertyName(\"os_family\")] public string OsFamily { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.UserAgentClient.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentClient.html",
    "title": "Class UserAgentClient | UrlShortener",
    "summary": "Class UserAgentClient Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll public class UserAgentClient Inheritance object UserAgentClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Engine [JsonPropertyName(\"engine\")] public string Engine { get; set; } Property Value string EngineVersion [JsonPropertyName(\"engine_version\")] public string EngineVersion { get; set; } Property Value string Name [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Type [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string Version [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.UserAgentDevice.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentDevice.html",
    "title": "Class UserAgentDevice | UrlShortener",
    "summary": "Class UserAgentDevice Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll public class UserAgentDevice Inheritance object UserAgentDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Brand [JsonPropertyName(\"brand\")] public string Brand { get; set; } Property Value string Model [JsonPropertyName(\"model\")] public string Model { get; set; } Property Value string Type [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.UserAgentOs.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentOs.html",
    "title": "Class UserAgentOs | UrlShortener",
    "summary": "Class UserAgentOs Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll public class UserAgentOs Inheritance object UserAgentOs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Platform [JsonPropertyName(\"platform\")] public string Platform { get; set; } Property Value string Version [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.html": {
    "href": "api/UrlShortener.App.Backend.Models.html",
    "title": "Namespace UrlShortener.App.Backend.Models | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Models Classes UserAgentApiResponse UserAgentClient UserAgentDevice UserAgentOs"
  },
  "api/UrlShortener.App.Backend.Program.html": {
    "href": "api/UrlShortener.App.Backend.Program.html",
    "title": "Class Program | UrlShortener",
    "summary": "Class Program Namespace UrlShortener.App.Backend Assembly UrlShortener.App.Backend.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Program() protected Program() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/UrlShortener.App.Backend.html": {
    "href": "api/UrlShortener.App.Backend.html",
    "title": "Namespace UrlShortener.App.Backend | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend Classes AppDbContext Program"
  },
  "api/UrlShortener.App.Blazor.Client.Api.AuthApi.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Api.AuthApi.html",
    "title": "Class AuthApi | UrlShortener",
    "summary": "Class AuthApi Namespace UrlShortener.App.Blazor.Client.Api Assembly UrlShortener.App.Blazor.Client.dll public class AuthApi : IAuthApi Inheritance object AuthApi Implements IAuthApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthApi(HttpClient) public AuthApi(HttpClient HttpClient) Parameters HttpClient HttpClient Methods Login(string, string) public Task<string?> Login(string email, string password) Parameters email string password string Returns Task<string> Register(string, string) public Task<RegisterResponseDto?> Register(string email, string password) Parameters email string password string Returns Task<RegisterResponseDto>"
  },
  "api/UrlShortener.App.Blazor.Client.Api.IAuthApi.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Api.IAuthApi.html",
    "title": "Interface IAuthApi | UrlShortener",
    "summary": "Interface IAuthApi Namespace UrlShortener.App.Blazor.Client.Api Assembly UrlShortener.App.Blazor.Client.dll public interface IAuthApi Methods Login(string, string) Task<string?> Login(string email, string password) Parameters email string password string Returns Task<string> Register(string, string) Task<RegisterResponseDto?> Register(string email, string password) Parameters email string password string Returns Task<RegisterResponseDto>"
  },
  "api/UrlShortener.App.Blazor.Client.Api.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Api.html",
    "title": "Namespace UrlShortener.App.Blazor.Client.Api | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor.Client.Api Classes AuthApi Interfaces IAuthApi"
  },
  "api/UrlShortener.App.Blazor.Client.Business.AppAuthenticationStateProvider.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.AppAuthenticationStateProvider.html",
    "title": "Class AppAuthenticationStateProvider | UrlShortener",
    "summary": "Class AppAuthenticationStateProvider Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll public class AppAuthenticationStateProvider : AuthenticationStateProvider Inheritance object AuthenticationStateProvider AppAuthenticationStateProvider Inherited Members AuthenticationStateProvider.NotifyAuthenticationStateChanged(Task<AuthenticationState>) AuthenticationStateProvider.AuthenticationStateChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppAuthenticationStateProvider(IJSRuntime) public AppAuthenticationStateProvider(IJSRuntime JsRuntime) Parameters JsRuntime IJSRuntime Methods GetAuthenticationStateAsync() Asynchronously gets an AuthenticationState that describes the current user. public override Task<AuthenticationState> GetAuthenticationStateAsync() Returns Task<AuthenticationState> A task that, when resolved, gives an AuthenticationState instance that describes the current user. GetToken() public string? GetToken() Returns string MarkUserAsLoggedOut() public Task MarkUserAsLoggedOut() Returns Task TryMarkUserAsAuthenticated(string?) public Task TryMarkUserAsAuthenticated(string? token) Parameters token string Returns Task"
  },
  "api/UrlShortener.App.Blazor.Client.Business.AuthService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.AuthService.html",
    "title": "Class AuthService | UrlShortener",
    "summary": "Class AuthService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll public class AuthService : IAuthService Inheritance object AuthService Implements IAuthService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthService(IAuthApi, INotificationService, AuthenticationStateProvider, NavigationManager) public AuthService(IAuthApi AuthApi, INotificationService NotificationService, AuthenticationStateProvider AuthenticationStateProvider, NavigationManager NavigationManager) Parameters AuthApi IAuthApi NotificationService INotificationService AuthenticationStateProvider AuthenticationStateProvider NavigationManager NavigationManager Methods LoginAsync(string, string) public Task LoginAsync(string username, string password) Parameters username string password string Returns Task RegisterAsync(string, string) public Task RegisterAsync(string username, string password) Parameters username string password string Returns Task"
  },
  "api/UrlShortener.App.Blazor.Client.Business.BrowserTimeProvider.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.BrowserTimeProvider.html",
    "title": "Class BrowserTimeProvider | UrlShortener",
    "summary": "Class BrowserTimeProvider Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll public class BrowserTimeProvider : TimeProvider Inheritance object TimeProvider BrowserTimeProvider Inherited Members TimeProvider.CreateTimer(TimerCallback, object, TimeSpan, TimeSpan) TimeProvider.GetElapsedTime(long) TimeProvider.GetElapsedTime(long, long) TimeProvider.GetLocalNow() TimeProvider.GetTimestamp() TimeProvider.GetUtcNow() TimeProvider.System TimeProvider.TimestampFrequency object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LocalTimeZone Gets a TimeZoneInfo object that represents the local time zone according to this TimeProvider's notion of time. public override TimeZoneInfo LocalTimeZone { get; } Property Value TimeZoneInfo Methods SetBrowserTimeZone(string) public virtual void SetBrowserTimeZone(string timeZone) Parameters timeZone string Events LocalTimeZoneChanged public event EventHandler? LocalTimeZoneChanged Event Type EventHandler"
  },
  "api/UrlShortener.App.Blazor.Client.Business.IAuthService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.IAuthService.html",
    "title": "Interface IAuthService | UrlShortener",
    "summary": "Interface IAuthService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll public interface IAuthService Methods LoginAsync(string, string) Task LoginAsync(string username, string password) Parameters username string password string Returns Task RegisterAsync(string, string) Task RegisterAsync(string username, string password) Parameters username string password string Returns Task"
  },
  "api/UrlShortener.App.Blazor.Client.Business.IMappingsService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.IMappingsService.html",
    "title": "Interface IMappingsService | UrlShortener",
    "summary": "Interface IMappingsService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll public interface IMappingsService Methods CreateMapping(string, string?) Task<CreateMappingResponseDto?> CreateMapping(string longUrl, string? name = null) Parameters longUrl string name string Returns Task<CreateMappingResponseDto> DeleteMapping(UrlMappingDto) Task<bool> DeleteMapping(UrlMappingDto mapping) Parameters mapping UrlMappingDto Returns Task<bool> GetMappings() Task<List<UrlMappingDto>?> GetMappings() Returns Task<List<UrlMappingDto>> GetStats() Task<UserStatsDto?> GetStats() Returns Task<UserStatsDto>"
  },
  "api/UrlShortener.App.Blazor.Client.Business.MappingsService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.MappingsService.html",
    "title": "Class MappingsService | UrlShortener",
    "summary": "Class MappingsService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll public class MappingsService : IMappingsService Inheritance object MappingsService Implements IMappingsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappingsService(HttpClient, AuthenticationStateProvider, NavigationManager) public MappingsService(HttpClient HttpClient, AuthenticationStateProvider AuthenticationStateProvider, NavigationManager NavigationManager) Parameters HttpClient HttpClient AuthenticationStateProvider AuthenticationStateProvider NavigationManager NavigationManager Methods CreateMapping(string, string?) public Task<CreateMappingResponseDto?> CreateMapping(string longUrl, string? name = null) Parameters longUrl string name string Returns Task<CreateMappingResponseDto> DeleteMapping(UrlMappingDto) public Task<bool> DeleteMapping(UrlMappingDto mapping) Parameters mapping UrlMappingDto Returns Task<bool> GetMappings() public Task<List<UrlMappingDto>?> GetMappings() Returns Task<List<UrlMappingDto>> GetStats() public Task<UserStatsDto?> GetStats() Returns Task<UserStatsDto>"
  },
  "api/UrlShortener.App.Blazor.Client.Business.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.html",
    "title": "Namespace UrlShortener.App.Blazor.Client.Business | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor.Client.Business Classes AppAuthenticationStateProvider AuthService BrowserTimeProvider MappingsService Interfaces IAuthService IMappingsService"
  },
  "api/UrlShortener.App.Blazor.Client.Program.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Program.html",
    "title": "Class Program | UrlShortener",
    "summary": "Class Program Namespace UrlShortener.App.Blazor.Client Assembly UrlShortener.App.Blazor.Client.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UrlShortener.App.Blazor.Client.html": {
    "href": "api/UrlShortener.App.Blazor.Client.html",
    "title": "Namespace UrlShortener.App.Blazor.Client | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor.Client Classes Program"
  },
  "api/UrlShortener.App.Blazor.Program.html": {
    "href": "api/UrlShortener.App.Blazor.Program.html",
    "title": "Class Program | UrlShortener",
    "summary": "Class Program Namespace UrlShortener.App.Blazor Assembly UrlShortener.App.Blazor.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Program() protected Program() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/UrlShortener.App.Blazor.html": {
    "href": "api/UrlShortener.App.Blazor.html",
    "title": "Namespace UrlShortener.App.Blazor | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor Classes Program"
  },
  "api/UrlShortener.App.Shared.Dto.CreateMappingRequestDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.CreateMappingRequestDto.html",
    "title": "Class CreateMappingRequestDto | UrlShortener",
    "summary": "Class CreateMappingRequestDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class CreateMappingRequestDto Inheritance object CreateMappingRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LongUrl [JsonPropertyName(\"long_url\")] public string LongUrl { get; set; } Property Value string Name [JsonPropertyName(\"name\")] public string? Name { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.CreateMappingResponseDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.CreateMappingResponseDto.html",
    "title": "Class CreateMappingResponseDto | UrlShortener",
    "summary": "Class CreateMappingResponseDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class CreateMappingResponseDto Inheritance object CreateMappingResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ShortUrl [JsonPropertyName(\"short_url\")] public string ShortUrl { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.LoginRequestDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.LoginRequestDto.html",
    "title": "Class LoginRequestDto | UrlShortener",
    "summary": "Class LoginRequestDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class LoginRequestDto Inheritance object LoginRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [JsonPropertyName(\"email\")] public string Email { get; init; } Property Value string Password [JsonPropertyName(\"password\")] public string Password { get; init; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.LoginResponseDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.LoginResponseDto.html",
    "title": "Class LoginResponseDto | UrlShortener",
    "summary": "Class LoginResponseDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class LoginResponseDto Inheritance object LoginResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Token [JsonPropertyName(\"token\")] public string Token { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.RedirectLogDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RedirectLogDto.html",
    "title": "Class RedirectLogDto | UrlShortener",
    "summary": "Class RedirectLogDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class RedirectLogDto Inheritance object RedirectLogDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessedAt [JsonPropertyName(\"accessed_at\")] public DateTime AccessedAt { get; set; } Property Value DateTime BrowserFamily [JsonPropertyName(\"browser_family\")] public string? BrowserFamily { get; set; } Property Value string ClientEngine [JsonPropertyName(\"client_engine\")] public string? ClientEngine { get; set; } Property Value string ClientName [JsonPropertyName(\"client_name\")] public string? ClientName { get; set; } Property Value string ClientType [JsonPropertyName(\"client_type\")] public string? ClientType { get; set; } Property Value string DeviceBrand [JsonPropertyName(\"device_brand\")] public string? DeviceBrand { get; set; } Property Value string DeviceModel [JsonPropertyName(\"device_model\")] public string? DeviceModel { get; set; } Property Value string DeviceType [JsonPropertyName(\"device_type\")] public string? DeviceType { get; set; } Property Value string Id [JsonPropertyName(\"id\")] public int Id { get; set; } Property Value int IpAddress [JsonPropertyName(\"ip_address\")] public string? IpAddress { get; set; } Property Value string OsFamily [JsonPropertyName(\"os_family\")] public string? OsFamily { get; set; } Property Value string OsName [JsonPropertyName(\"os_name\")] public string? OsName { get; set; } Property Value string OsVersion [JsonPropertyName(\"os_version\")] public string? OsVersion { get; set; } Property Value string UserAgent [JsonPropertyName(\"user_agent\")] public string? UserAgent { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.RegisterErrorType.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RegisterErrorType.html",
    "title": "Enum RegisterErrorType | UrlShortener",
    "summary": "Enum RegisterErrorType Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public enum RegisterErrorType Fields EmailAlreadyExists = 2 MissingEmailOrPassword = 1 None = 0"
  },
  "api/UrlShortener.App.Shared.Dto.RegisterRequestDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RegisterRequestDto.html",
    "title": "Class RegisterRequestDto | UrlShortener",
    "summary": "Class RegisterRequestDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class RegisterRequestDto Inheritance object RegisterRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [JsonPropertyName(\"email\")] public string Email { get; init; } Property Value string Password [JsonPropertyName(\"password\")] public string Password { get; init; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.RegisterResponseDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RegisterResponseDto.html",
    "title": "Class RegisterResponseDto | UrlShortener",
    "summary": "Class RegisterResponseDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class RegisterResponseDto Inheritance object RegisterResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorType [JsonPropertyName(\"error_type\")] public RegisterErrorType ErrorType { get; set; } Property Value RegisterErrorType Success [JsonPropertyName(\"success\")] public bool Success { get; set; } Property Value bool"
  },
  "api/UrlShortener.App.Shared.Dto.UrlMappingDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UrlMappingDto.html",
    "title": "Class UrlMappingDto | UrlShortener",
    "summary": "Class UrlMappingDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class UrlMappingDto Inheritance object UrlMappingDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Id [JsonPropertyName(\"id\")] public int Id { get; set; } Property Value int LongUrl [JsonPropertyName(\"long_url\")] public string LongUrl { get; set; } Property Value string Name [JsonPropertyName(\"name\")] public string? Name { get; set; } Property Value string RedirectLogs [JsonPropertyName(\"redirect_logs\")] public List<RedirectLogDto> RedirectLogs { get; set; } Property Value List<RedirectLogDto> ShortUrl [JsonPropertyName(\"short_url\")] public string ShortUrl { get; set; } Property Value string User [JsonPropertyName(\"user\")] public string? User { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentClientDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentClientDto.html",
    "title": "Class UserAgentClientDto | UrlShortener",
    "summary": "Class UserAgentClientDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class UserAgentClientDto Inheritance object UserAgentClientDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Engine [JsonPropertyName(\"engine\")] public string Engine { get; set; } Property Value string EngineVersion [JsonPropertyName(\"engine_version\")] public string EngineVersion { get; set; } Property Value string Name [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Type [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string Version [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentDeviceDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentDeviceDto.html",
    "title": "Class UserAgentDeviceDto | UrlShortener",
    "summary": "Class UserAgentDeviceDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class UserAgentDeviceDto Inheritance object UserAgentDeviceDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Brand [JsonPropertyName(\"brand\")] public string Brand { get; set; } Property Value string Model [JsonPropertyName(\"model\")] public string Model { get; set; } Property Value string Type [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentInfoDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentInfoDto.html",
    "title": "Class UserAgentInfoDto | UrlShortener",
    "summary": "Class UserAgentInfoDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class UserAgentInfoDto Inheritance object UserAgentInfoDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BrowserFamily [JsonPropertyName(\"browser_family\")] public string BrowserFamily { get; set; } Property Value string Client [JsonPropertyName(\"client\")] public UserAgentClientDto? Client { get; set; } Property Value UserAgentClientDto Device [JsonPropertyName(\"device\")] public UserAgentDeviceDto? Device { get; set; } Property Value UserAgentDeviceDto Os [JsonPropertyName(\"os\")] public UserAgentOsDto? Os { get; set; } Property Value UserAgentOsDto OsFamily [JsonPropertyName(\"os_family\")] public string OsFamily { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentOsDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentOsDto.html",
    "title": "Class UserAgentOsDto | UrlShortener",
    "summary": "Class UserAgentOsDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class UserAgentOsDto Inheritance object UserAgentOsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Platform [JsonPropertyName(\"platform\")] public string Platform { get; set; } Property Value string Version [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserStatsDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserStatsDto.html",
    "title": "Class UserStatsDto | UrlShortener",
    "summary": "Class UserStatsDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll public class UserStatsDto Inheritance object UserStatsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Clicks [JsonPropertyName(\"clicks\")] public int Clicks { get; set; } Property Value int Mappings [JsonPropertyName(\"mappings\")] public int Mappings { get; set; } Property Value int"
  },
  "api/UrlShortener.App.Shared.Dto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.html",
    "title": "Namespace UrlShortener.App.Shared.Dto | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared.Dto Classes CreateMappingRequestDto CreateMappingResponseDto LoginRequestDto LoginResponseDto RedirectLogDto RegisterRequestDto RegisterResponseDto UrlMappingDto UserAgentClientDto UserAgentDeviceDto UserAgentInfoDto UserAgentOsDto UserStatsDto Enums RegisterErrorType"
  },
  "api/UrlShortener.App.Shared.Extensions.DtoExtensions.html": {
    "href": "api/UrlShortener.App.Shared.Extensions.DtoExtensions.html",
    "title": "Class DtoExtensions | UrlShortener",
    "summary": "Class DtoExtensions Namespace UrlShortener.App.Shared.Extensions Assembly UrlShortener.App.Shared.dll public static class DtoExtensions Inheritance object DtoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDto(RedirectLog) public static RedirectLogDto ToDto(this RedirectLog redirectLog) Parameters redirectLog RedirectLog Returns RedirectLogDto ToDto(UrlMapping, HttpRequest) public static UrlMappingDto ToDto(this UrlMapping urlMapping, HttpRequest httpRequest) Parameters urlMapping UrlMapping httpRequest HttpRequest Returns UrlMappingDto"
  },
  "api/UrlShortener.App.Shared.Extensions.html": {
    "href": "api/UrlShortener.App.Shared.Extensions.html",
    "title": "Namespace UrlShortener.App.Shared.Extensions | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared.Extensions Classes DtoExtensions"
  },
  "api/UrlShortener.App.Shared.Models.RedirectLog.html": {
    "href": "api/UrlShortener.App.Shared.Models.RedirectLog.html",
    "title": "Class RedirectLog | UrlShortener",
    "summary": "Class RedirectLog Namespace UrlShortener.App.Shared.Models Assembly UrlShortener.App.Shared.dll public class RedirectLog Inheritance object RedirectLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DtoExtensions.ToDto(RedirectLog) Properties AccessedAt public DateTime AccessedAt { get; set; } Property Value DateTime BrowserFamily public string? BrowserFamily { get; set; } Property Value string ClientEngine public string? ClientEngine { get; set; } Property Value string ClientName public string? ClientName { get; set; } Property Value string ClientType public string? ClientType { get; set; } Property Value string DeviceBrand public string? DeviceBrand { get; set; } Property Value string DeviceModel public string? DeviceModel { get; set; } Property Value string DeviceType public string? DeviceType { get; set; } Property Value string Id public int Id { get; set; } Property Value int IpAddress public string? IpAddress { get; set; } Property Value string OsFamily public string? OsFamily { get; set; } Property Value string OsName public string? OsName { get; set; } Property Value string OsVersion public string? OsVersion { get; set; } Property Value string UrlMapping public UrlMapping UrlMapping { get; set; } Property Value UrlMapping UrlMappingId public int UrlMappingId { get; set; } Property Value int UserAgent public string? UserAgent { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Models.UrlMapping.html": {
    "href": "api/UrlShortener.App.Shared.Models.UrlMapping.html",
    "title": "Class UrlMapping | UrlShortener",
    "summary": "Class UrlMapping Namespace UrlShortener.App.Shared.Models Assembly UrlShortener.App.Shared.dll public class UrlMapping Inheritance object UrlMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DtoExtensions.ToDto(UrlMapping, HttpRequest) Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime Id public int Id { get; set; } Property Value int LongUrl public string LongUrl { get; set; } Property Value string Name public string? Name { get; set; } Property Value string Path public string Path { get; set; } Property Value string RedirectLogs public List<RedirectLog> RedirectLogs { get; set; } Property Value List<RedirectLog> User public string? User { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Models.User.html": {
    "href": "api/UrlShortener.App.Shared.Models.User.html",
    "title": "Class User | UrlShortener",
    "summary": "Class User Namespace UrlShortener.App.Shared.Models Assembly UrlShortener.App.Shared.dll public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int PasswordHash public string PasswordHash { get; set; } Property Value string Salt public string Salt { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Models.html": {
    "href": "api/UrlShortener.App.Shared.Models.html",
    "title": "Namespace UrlShortener.App.Shared.Models | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared.Models Classes RedirectLog UrlMapping User"
  },
  "index.html": {
    "href": "index.html",
    "title": "Willkommen beim UrlShortener | UrlShortener",
    "summary": "Willkommen beim UrlShortener Diese Dokumentation beschreibt das Projekt URL-Shortener, das im Rahmen des Moduls Software-Qualitätssicherung (SQS) an der Technischen Hochschule Rosenheim im Sommersemester 2025 (SoSe25) umgesetzt wurde. Ziel des Projekts war es, eine moderne Webanwendung zur Erstellung und Verwaltung von Kurz-URLs zu entwickeln – inklusive Benutzerregistrierung, Login, Tracking von Link-Klicks und einer übersichtlichen Benutzeroberfläche. Die Anwendung wurde vollständig mit .NET 9, Blazor Server und Entity Framework Core entwickelt und ist containerisiert mit Docker. Neben den funktionalen Anforderungen lag ein besonderer Fokus auf Qualität, Testbarkeit und Wartbarkeit des Systems. Inhalt \uD83E\uDDED Verwendung Eine Anleitung zur Installation, Ausführung und Nutzung der Anwendung. \uD83D\uDCD0 Architekturdokumentation (arc42) Detaillierte Beschreibung der Softwarearchitektur mit C4-Modellen, Entwurfsentscheidungen und Qualitätssicherungsmaßnahmen. \uD83D\uDD0C API-Dokumentation Übersicht über die REST-API-Endpunkte, deren Parameter, Rückgaben und Beispielanfragen."
  },
  "md/docs.html": {
    "href": "md/docs.html",
    "title": "Dokumentation | UrlShortener",
    "summary": "Dokumentation Dokumentation zur Projektarbeit im Fach \"Software-Qualitätssicherung\" an der TH Rosenheim (SoSe25) von Simon Liebers Der Aufbau dieser Dokumentation orientiert sich am offiziellen Arc42-Template 1. Einleitung Fachliche Anforderungen Bei der Anwendung handelt es sich um einen URL-Shortener mit Benutzerkonten. Nutzer:innen können sich mit E-Mail-Adresse und Passwort registrieren und anschließend über ein persönliches Dashboard kurze URLs erstellen. Die erstellten Kurz-URLs werden dem jeweiligen Nutzerkonto zugeordnet und können jederzeit wieder gelöscht werden. Ein zentrales Feature der Anwendung ist das Click Tracking: Wenn eine Person auf eine Kurz-URL klickt, werden Informationen wie IP-Adresse, Gerätetyp, Betriebssystem und Browser (aus dem User-Agent) in der Datenbank gespeichert. Die Nutzerinnen und Nutzer der Anwendung können für jede Kurz-URL eine detaillierte Auflistung dieser Zugriffsdaten einsehen. Zusätzlich wird eine Zählung angezeigt, wie oft eine URL bereits aufgerufen wurde. Qualitätsziele Die Anwendung verfolgt mehrere zentrale Qualitätsziele, die sowohl die Benutzerfreundlichkeit als auch die technische Umsetzung betreffen: Benutzerfreundlichkeit: Die Registrierung und Nutzung der Anwendung soll möglichst intuitiv und ohne technische Vorkenntnisse möglich sein. Sicherheit: Der Schutz personenbezogener Daten (z. B. E-Mail-Adressen und Tracking-Informationen) hat hohe Priorität. Die Datenübertragung erfolgt verschlüsselt. Wartbarkeit: Der Quellcode ist modular aufgebaut, um spätere Erweiterungen zu erleichtern. Performance: Die Anwendung soll auch bei vielen gleichzeitig geklickten Links zuverlässig und performant reagieren. Stakeholder Die wesentlichen Stakeholder dieses Projekts sind: Studierende des Moduls Software-Qualitätssicherung an der TH Rosenheim. Lehrende/Dozenten, die das Projekt im Kontext der Lehrveranstaltung begleiten und bewerten. 2. Beschränkungen Im Rahmen des Projekts galten folgende Einschränkungen und Rahmenbedingungen: Architekturvorgabe: Die Anwendung musste als verteiltes System umgesetzt werden, bestehend aus einem Frontend, einem Backend sowie einer persistenten Datenhaltung (Datenbank). Technologievorgabe: Es durften ausschließlich folgende Programmiersprachen verwendet werden: Java C# Python TypeScript Externe Abhängigkeiten: Eine externe API musste im Projekt integriert und genutzt werden. Zeitliche Einschränkung: Die Umsetzung des Projekts musste bis zur Präsentation am 24. Juni 2025 abgeschlossen sein. Quellcodeverwaltung: Als zentrales Repository für die Versionsverwaltung muss GitHub verwendet werden. 3. Kontext und Umfang TODO: C4 Modelle Kontextdiagramm (Level 1) Das System ist ein Webservice mit direkter Interaktion durch Benutzer über den Browser. Die einzige externe Schnittstelle ist eine Third-Party-API zur Analyse von User-Agent-Strings. Externe Beteiligte: Endnutzer:innen: Interagieren über das Web-Frontend mit der Anwendung, z. B. zum Erstellen und Verwalten von Kurz-URLs. Externer Dienst – ApicAgent: Wird vom Backend genutzt, um die im User-Agent enthaltenen Informationen (z. B. Betriebssystem, Gerät, Browser) strukturiert zu analysieren und zu speichern. Containerdiagramm (Level 2) Das System besteht aus drei Haupt-Containern: 1. Web-Frontend (Blazor Server) Stellt die Benutzeroberfläche bereit. Verantwortlich für Benutzerinteraktion, URL-Verwaltung und Anzeige der Tracking-Daten. Kommuniziert per HTTP-REST mit dem Backend. 2. Backend (ASP.NET Core Web API) Beinhaltet die gesamte Geschäftslogik und Datenverarbeitung. Bietet REST-Endpunkte zur Nutzerregistrierung, URL-Verwaltung, Weiterleitung und Tracking. Ruft REST-API von ApicAgent auf zur Analyse des UserAgents des Nutzers. Datenbank (MS SQL Server) Persistiert Benutzerkonten, Kurz-URLs und Tracking-Informationen. Wird ausschließlich vom Backend angesprochen. Komponentendiagramm (Level 3) Backend-Komponenten: Frontend-Komponenten (Blazor Pages): 4. Lösungsstrategie Für die Umsetzung der Anwendung wurde bewusst ein konsistenter Technologie-Stack auf Basis von .NET gewählt. Diese Entscheidung basiert auf mehreren Vorteilen: Integrierte Entwicklung: Durch die Verwendung von Blazor Server für das Frontend und ASP.NET Core Web API für das Backend konnte die gesamte Anwendung innerhalb des .NET-Ökosystems entwickelt werden. Dies ermöglichte eine reibungslose Integration, eine einheitliche Sprache (C#) sowie eine effiziente Entwicklung. MSSQL: MSSQL als relationale Datenbank wurde gewählt, da es eine stabile und leistungsstarke Lösung für datenintensive Webanwendungen darstellt. Die gute Integration mit Entity Framework Core ermöglichte eine komfortable und zugleich flexible Datenzugriffsschicht. Entity Framework: Entity Framework Core wurde zur Abbildung des Datenmodells und für die Kommunikation mit der Datenbank verwendet. Dank der Code-First-Strategie können Datenbankmigrationen versioniert und automatisiert durchgeführt werden. Schichtmodell: Die Anwendung folgt einem klassischen Schichtenmodell, bei dem Präsentations-, Geschäftslogik- und Persistenzschicht klar voneinander getrennt sind. Dies erleichtert die Wartung und zukünftige Erweiterungen. 5. Baustein-Sicht Die Anwendung ist in klar getrennte Projektbereiche unterteilt, die die verschiedenen Aufgaben und Verantwortlichkeiten innerhalb des Systems abbilden. Dabei wurde auf eine modulare und wiederverwendbare Struktur geachtet, die sowohl im Backend als auch im Frontend eine saubere Trennung von Zuständigkeiten ermöglicht. Gemeinsame Bausteine Das Projekt UrlShortener.App.Shared enthält alle gemeinsam genutzten Modelle und DTOs, die zwischen Frontend und Backend ausgetauscht werden. Die zentrale Ablage dieser Strukturen ermöglicht eine typsichere Kommunikation innerhalb des .NET-Ökosystems. Backend Bausteine Das Backend besteht aus dem Projekt UrlShortener.App.Backend und ist in mehrere Module unterteilt: Controllers: Enthält die REST-Endpunkte für Authentifizierung (AuthController), Systemstatus (HealthCheckController), URL-Verwaltung (MappingsController) und Weiterleitung (RedirectController). Business: Implementiert die Geschäftslogik für Authentifizierung, Erstellung und Löschung von URLs, sowie das Tracking von Klicks inkl. API-Kommunikation mit ApicAgent. Models: Enthält die Models, die von der ApicAgent REST-API per HTTP-Request zur Verfügung gestellt werden. Extensions: Sammlung von statischen Hilfsklassen. Middleware: Implementierung eigener Middleware, um das Verhalten der Anwendung zentral zu steuern (Zum Beispiel, um ein Delay auf eingehende Requests anzuwenden, um Brute-Force Angriffe auf den Login ineffizient zu machen). Frontend-Bausteine Das Frontend besteht aus zwei Projekten: Das Projekt UrlShortener.App.Blazor stellt die Anwendung bereit und fungiert als Host für die Blazor Server-Komponenten. Die eigentlichen UI- und Interaktionslogiken befinden sich im Projekt UrlShortener.App.Blazor.Client, unterteilt in folgende Bausteine: API: Wrapper für die Kommunikation mit dem Backend via HTTP. Business: Client-seitige Geschäftslogik zur Verwaltung von URLs und Anzeige der Tracking-Daten. Components: Wiederverwendbare UI-Komponenten wie Formulare, Tabellen oder Dialoge. Extensions: Erweiterungsmethoden und Hilfsfunktionen für die UI oder Datenverarbeitung. 6. Runtime-Sicht Die Runtime-Sicht beschreibt typische Abläufe innerhalb des Systems zur Laufzeit. Dabei werden die Interaktionen zwischen Nutzer, Frontend, Backend, Datenbank und externen APIs dargestellt. Im Folgenden werden zwei zentrale Szenarien der Anwendung beispielhaft beschrieben. Szenario 1: Nutzer erstellt eine neue Kurz-URL Der angemeldete Nutzer öffnet die HomePage im Blazor-Frontend. Über ein Formular gibt er eine Lange URL und einen Titel ein und klickt auf „Submit“. Das Frontend ruft den REST-Endpunkt /api/mappings/create im MappingsController des Backends per POST-Request mit den eingegeben Daten auf. Das Backend validiert die Eingabe und generiert eine eindeutige Kurz-URL. Die Lange URL, die generierte Kurz-URL, der Timestamp, der Titel und die Benutzer-ID werden in der Datenbank gespeichert. Die neue URL wird dem Benutzer im Frontend angezeigt und zur Übersichtsliste hinzugefügt. Szenario 2: Ein Dritter klickt auf eine Kurz-URL Eine Person ruft eine zuvor generierte Kurz-URL im Browser auf. Der Request erreicht den RedirectController, welcher die Kurz-URL durch den Pfad mit der Datenbank abgleicht. Wenn ein Mapping gefunden wird: Das System extrahiert die IP-Adresse und den User-Agent des Clients aus dem Request-Header. Der User-Agent wird über die externe ApicAgent-API per GET-Request analysiert, um Gerät, OS und Browser zu bestimmen. Ein neuer Tracking-Eintrag wird in der Datenbank gespeichert (inkl. Zeitpunkt, IP, Gerätedaten etc.). Der Client wird mit einem HTTP-Redirect (Status 302) zur Lang-URL weitergeleitet. Falls kein Mapping existiert, wird eine 404-Fehlermeldung zurückgegeben. Beide Szenarien zeigen, wie die verschiedenen Systemkomponenten zusammenarbeiten, um Kernfunktionalitäten wie URL-Erstellung und Tracking performant und sicher umzusetzen. 7. Deployment-Sicht Die Anwendung wird containerisiert ausgeliefert und über eine zentrale docker-compose-Konfiguration gestartet. Sie besteht aus zwei Hauptdiensten – Backend und Frontend – die jeweils in einem eigenen Docker-Container laufen. Beide Images werden automatisch via GitHub Actions gebaut und mit der jeweils aktuellen Version veröffentlicht. Containerisierung Backend-Container: Basierend auf dem offiziellen .NET 9.0 ASP.NET-Image. Enthält die REST-API sowie die Geschäftslogik. Wird über Port 6060 bereitgestellt. Nutzt eine mehrstufige Build-Pipeline (Restore, Build, Publish), um ein Image zu erzeugen. Frontend-Container: Ebenfalls basierend auf dem .NET 9.0 ASP.NET-Image. Hostet die Blazor-Komponenten. Stellt die Webanwendung über Ports 8080 und 8081 zur Verfügung. Build & Deployment Buildprozess über GitHub Actions: Bei jeder Änderung im Repository wird automatisch ein neuer Build-Workflow ausgelöst. Dabei werden beide Images erzeugt, getaggt und veröffentlicht. Docker-Compose-Konfiguration: Alle Dienste werden konsistent über docker-compose up gestartet. Die Kommunikation zwischen Frontend und Backend erfolgt über ein definiertes Container-Netzwerk. Lokale Entwicklung Für die lokale Ausführung genügt: docker-compose up --build Die Anwendung ist anschließend unter den definierten Ports erreichbar. Backend und Frontend laufen unabhängig, aber koordiniert im selben Container-Netzwerk. 8. Querschnittskonzepte Sicherheit Die Anwendung verwendet ein tokenbasiertes Authentifizierungssystem auf Basis von JWT (JSON Web Token). Nach erfolgreicher Registrierung oder Anmeldung erhält der Client ein signiertes Token, das bei allen nachfolgenden REST-Requests im HTTP-Header mitgesendet wird. Durch dieses Verfahren wird sichergestellt, dass nur authentifizierte Nutzer:innen Zugriff auf geschützte Ressourcen (z. B. eigene URLs oder Tracking-Daten) erhalten. Auf Serverseite wird jedes Token geprüft, bevor ein API-Endpunkt verarbeitet wird. Dies gewährleistet eine sichere und skalierbare Zugriffskontrolle ohne die Notwendigkeit einer serverseitigen Session-Verwaltung. Zusätzliche Sicherheitsmaßnahmen: HTTPS-Verschlüsselung zur Absicherung der Kommunikation. Validierung von Eingaben zur Vermeidung von Injection-Angriffen. CORS-Konfiguration, um nur erlaubte Ursprünge zu akzeptieren. Während der Entwicklung werden zur Vereinfachung alle Ursprünge erlaubt. Im Produktiven Einsatz sollten erlaubte Quellen noch explizit konfiguriert werden, um eine maximale Sicherheit zu gewährleisten. User Interface Die Benutzeroberfläche wurde mit Blazor Server entwickelt und nutzt Tailwind CSS als Styling-Framework. Tailwind ermöglicht ein konsistentes, modernes und responsives Design durch Utility-Klassen direkt im Markup. Das Resultat ist eine klar strukturierte, leicht anpassbare Oberfläche mit einem schlanken und professionellen Look. Die Anwendung besteht aus modular aufgebauten Komponenten, z. B. für Formulare, Tabellen, Buttons und Dialoge. Diese wurden als wiederverwendbare Blazor-Komponenten organisiert und sorgen für ein einheitliches Look-and-Feel innerhalb der gesamten Anwendung. User Experience Besonderer Wert wurde auf eine intuitive und fokussierte Nutzererfahrung gelegt. Die Oberfläche ist minimalistisch gehalten und lenkt die Aufmerksamkeit auf die Kernfunktionen: URLs kürzen, verwalten und analysieren. Dank Tailwind CSS konnten UI-Elemente wie Formulareingaben, Fehlermeldungen oder Dialoge benutzerfreundlich gestaltet werden. Die Reaktivität und kurze Ladezeiten durch Blazor Server sorgen für ein flüssiges Nutzererlebnis ohne spürbare Wartezeiten. Weitere UX-Merkmale: Eingabevalidierung direkt beim Tippen. Modale Dialoge für Trackingdaten, damit der Seitenkontext erhalten bleibt. Feedback-Mechanismen nach Nutzeraktionen (z. B. Toast-Meldungen nach erfolgreichem Speichern oder Löschen). Das gesamte UI/UX-Design zielt darauf ab, die Nutzung der Anwendung auch für technisch weniger erfahrene Anwender:innen so einfach und angenehm wie möglich zu machen. 9. Architekturentscheidungen Die wichtigsten Entscheidungen mit Auswirkungen auf die Architektur wurden als architecture decision records (ADR) dokumentiert. ADR 1: Entscheidung für eigenen URL-Shortener Status: Entschieden Datum: 2025-03-18 Entscheidung: Ich habe mich entschieden, den URL-Shortener selbst zu implementieren, anstatt auf einen externen Dienst zurückzugreifen. Alle Kurz-URLs werden in einer eigenen Datenbank gespeichert und können von den Nutzern verwaltet werden. Begründung: Volle Kontrolle über die URL-Verwaltung und gespeicherte Daten. Möglichkeit zur Integration zusätzlicher Funktionen wie Tracking und Analytics. Benutzer können personalisierte Kurzlinks erstellen. Flexibilität für zukünftige Erweiterungen. Alternativen: Nutzung externer Dienste wie Bitly oder TinyURL. Vorteile: Schnellere Implementierung, keine eigene Infrastruktur nötig. Nachteile: Eingeschränkte Anpassbarkeit, Abhängigkeit von Dritten, evtl. zusätzliche Kosten. ADR 2: Entscheidung für JWT-Authentifizierung Status: Entschieden Datum: 2025-03-18 Entscheidung: Ich verwende JSON Web Tokens (JWT) zur Authentifizierung und Autorisierung der Nutzer. Das Token wird im lokalen Speicher des Browsers abgelegt und bei jedem Request an das Backend übermittelt. Begründung: JWTs sind leichtgewichtig und effizient. Ermöglichen zustandslose Authentifizierung (keine Session-Daten auf dem Server nötig). Weit verbreitet, gut dokumentiert und einfach in Blazor und ASP.NET Core integrierbar. Tokenbasierte Authentifizierung ist sicher und skalierbar. Alternativen: Session-basierte Authentifizierung. Vorteile: Einfach umsetzbar für kleine Anwendungen. Nachteile: Server benötigt Speicher für Sessions, schlechter skalierbar. ADR 3: Entscheidung für SQL Server als Datenbank Status: Entschieden Datum: 2025-03-19 Entscheidung: Ich verwende Microsoft SQL Server als relationale Datenbank für das Backend. Diese Wahl bietet eine zuverlässige Grundlage für Transaktionen und komplexe Abfragen im Zusammenhang mit Benutzer- und URL-Daten. Begründung: SQL Server ist stabil, performant und unterstützt ACID-Transaktionen. Nahtlose Integration mit Entity Framework Core. Persönliche Erfahrung im Umgang mit SQL Server – keine Einarbeitung nötig. Alternativen: Nutzung von NoSQL-Datenbanken wie MongoDB. Vorteile: Besser für unstrukturierte Daten, horizontale Skalierung möglich. Nachteile: Komplexe Abfragen schwieriger, keine konsistenten Transaktionen. ADR 4: Entscheidung für Blazor als Frontend-Technologie Status: Entschieden Datum: 2025-03-19 Entscheidung: Ich habe mich für Blazor als Frontend-Framework entschieden, da es die Entwicklung interaktiver Webanwendungen in C# ermöglicht und die Wiederverwendung von Code zwischen Frontend und Backend unterstützt. Begründung: C# kann sowohl im Frontend als auch im Backend verwendet werden. Gute Integration mit ASP.NET Core. Möglichkeit, bestehende .NET-Bibliotheken zu verwenden. Kein Wechsel zu JavaScript nötig – reduziert Komplexität. Alternativen: Einsatz von React oder Angular. Vorteile: Große Community, viele UI-Bibliotheken. Nachteile: JavaScript notwendig, keine direkte .NET-Integration. ADR 5: Entscheidung für Blazor Server statt Blazor WebAssembly Status: Entschieden Datum: 2025-03-20 Entscheidung: Ich habe mich für Blazor Server als Hosting-Modell entschieden. Die Logik wird vollständig serverseitig ausgeführt, und der Client kommuniziert per SignalR-Verbindung mit dem Server. Begründung: Höhere Sicherheit, da keine API-Requests oder Logik im Browser sichtbar sind. Schnellere Ladezeiten, da keine WebAssembly-Runtime benötigt wird. Alternativen: Blazor WebAssembly Vorteile: Vollständig clientseitig, offlinefähig. Nachteile: Logik im Browser einsehbar, längere Ladezeit. 10. Qualität Nicht-funktionale Qualitätsanforderungen nach ISO 25010 Sicherheit Authentifizierung & Autorisierung: Zugriff auf geschützte Bereiche ist nur nach Login mit gültigem JWT-Token möglich. Datenverschlüsselung: Die Kommunikation zwischen Client und Server erfolgt über HTTPS. Input-Validierung: Sämtliche Benutzereingaben werden serverseitig validiert, um Angriffe wie SQL-Injection zu verhindern. Trennung der Rollen: Nicht angemeldete Benutzer haben keinerlei Zugriff auf Nutzerdaten oder Kurz-URLs. Effizienz und Performanz Schnelle Antwortzeiten durch serverseitiges Rendering mit Blazor Server. Vermeidung von unnötigen Datenbankabfragen. Asynchrone Verarbeitung von Tracking-Informationen zur Entkopplung vom Benutzerfluss (Weiterleitung erfolgt sofort, Tracking im Hintergrund). Wartbarkeit Wartbarkeit und Erweiterbarkeit: Die Anwendung ist in modularen Bausteinen organisiert (nach Schichtenmodell und klarer Trennung von Concerns). Gemeinsame Modelle liegen in einem Shared-Projekt, sodass Änderungen zentral vorgenommen werden können. Wirtschaftlichkeit: Durch die einheitliche Verwendung von .NET und C# über alle Ebenen hinweg kann Entwicklungs- und Wartungsaufwand minimiert werden. Zudem ist durch Dockerisierung ein einfaches Rollout möglich. Benutzbarkeit Benutzerfreundlichkeit: Die Oberfläche ist minimalistisch und intuitiv gehalten. Tailwind CSS sorgt für ein einheitliches, modernes Design. Wichtige Funktionen wie das Kürzen und Löschen von URLs oder das Anzeigen von Trackingdaten sind mit wenigen Klicks erreichbar. Kompatibilität Interoperabilität und Integration: Die Anwendung nutzt standardisierte HTTP-REST-Schnittstellen und kann damit auch problemlos von anderen Systemen angesprochen oder erweitert werden. Funktionale Eignung: Die Kernfunktionen (Erstellen, Verwalten und Auswerten von Kurz-URLs) sind vollständig implementiert und entsprechen den Anforderungen. Portabilität: Die Anwendung läuft containerisiert über Docker und ist damit unabhängig vom Betriebssystem oder der Infrastruktur einfach auf verschiedenen Umgebungen deploybar. Zuverlässigkeit: Das System erkennt fehlerhafte Eingaben und bietet dem Benutzer entsprechendes Feedback. 11. Qualitätssichernde Maßnahmen und Tests Die Qualität der Anwendung wurde durch verschiedene Testarten, automatisierte Analysen und CI sichergestellt. Der Fokus lag dabei sowohl auf funktionaler Korrektheit als auch auf nicht-funktionalen Aspekten wie Performance und Sicherheit. Unittests (Backend) Im Projekt UrlShortener.Test.Backend wurden umfassende Unit-Tests für die Kernlogik des Backends erstellt. Dabei wurden u. a. folgende Bereiche abgedeckt: Validierung von URL-Eingaben Erzeugung und Speicherung von Kurz-URLs Authentifizierungs-Logik (z. B. Token-Handling) Trennung der Tests nach Modulen (Mapping, Auth, Tracking) Unittests (Frontend) Im Projekt UrlShortener.Test.Frontend wurden Unit-Tests für die Frontend-Komponenten durchgeführt. Dabei lag der Fokus auf: Validierung von Eingaben in Formularen UI-Komponentenverhalten Funktionalität der Geschäftslogik Integrationstests Das Projekt UrlShortener.Test.Backend enthält auch Integrationstests, die die REST-API testen. Es wurden u. a. getestet: Registrierung und Login Erstellen und Löschen von Kurz-URLs Zugriffsschutz über JWT Rückgabeverhalten bei fehlerhaften Requests Penetration-Tests Im Projekt UrlShortener.Test.End2End wurden gezielt Sicherheitstests (PenTests) implementiert, u. a. um zu prüfen: Unberechtigter Zugriff auf geschützte Ressourcen Manipulation von JWTs Eingabe von potenziell schädlichem Code (Injection-Angriffe) Verhalten bei abgelaufenen oder ungültigen Tokens End2End-Tests Ebenfalls in UrlShortener.Test.End2End befinden sich die End2End-Tests, mit denen komplette Nutzungsflüsse simuliert und geprüft werden. Dazu werden sowohl Backend, Frontend und eine In-Memory-Datenbank gestartet und mittels PlayWright durch das UI navigiert. Diese Tests laufen automatisiert in der CI-Pipeline (Headless) und prüfen: Funktionale Korrektheit des Zusammenspiels zwischen Frontend und Backend Darstellung und Zustand der UI nach typischen Aktionen Rückmeldungen bei Erfolgen und Fehlern Last-Tests Die Anwendung wurde zudem mit Lasttests auf ihre Stabilität unter erhöhter Benutzeraktivität geprüft. Dabei wurde unter anderem simuliert: Massenerstellung von URLs Verhalten von Login/Registrierung unter Last Statische Codeanalyse Die Anwendung wird mithilfe von SonarQube regelmäßig auf Code Smells, Security Vulnerabilities, Duplikate und Testabdeckung überprüft. Die SonarQube-Auswertungen sind in den CI-Workflow integriert und liefern konkrete Hinweise zur Codequalität."
  },
  "md/usage.html": {
    "href": "md/usage.html",
    "title": "Verwendung | UrlShortener",
    "summary": "Verwendung Vorraussetzungen Docker Anwendung starten Repository klonen. Stelle sicher, dass Docker auf deinem System installiert ist. Baue und starte das Projekt mit Docker Compose: docker-compose up --build Dadurch werden sowohl der Frontend- als auch der Backend-Service gestartet. Du kannst die Anwendung unter http://localhost:1010 (oder dem von dir konfigurierten Port) aufrufen. Anwendung stoppen Um die Container zu stoppen: docker-compose down"
  }
}