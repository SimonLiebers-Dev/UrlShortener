{
  "api/UrlShortener.App.Backend.AppDbContext.html": {
    "href": "api/UrlShortener.App.Backend.AppDbContext.html",
    "title": "Class AppDbContext | UrlShortener",
    "summary": "Class AppDbContext Namespace UrlShortener.App.Backend Assembly UrlShortener.App.Backend.dll Database context for the application. public class AppDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppDbContext(DbContextOptions<AppDbContext>) Database context for the application. public AppDbContext(DbContextOptions<AppDbContext> options) Parameters options DbContextOptions<AppDbContext> The options for the database context. Properties RedirectLogs Gets or sets the database table of redirect logs. Each RedirectLog records information about a redirection event, including timestamp and IP address. public virtual DbSet<RedirectLog> RedirectLogs { get; set; } Property Value DbSet<RedirectLog> UrlMappings Gets or sets the database table of URL mappings. Each UrlMapping represents a shortened URL and its corresponding original URL with additional properties. public virtual DbSet<UrlMapping> UrlMappings { get; set; } Property Value DbSet<UrlMapping> Users Gets or sets the database table of users. Each User represents an individual user of the URL shortener system. public virtual DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnModelCreating(ModelBuilder) Configures the entity relationships and constraints using the model builder. This method is called when the model for a derived context has been initialized, but before the model has been locked down and used to initialize the context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for the context."
  },
  "api/UrlShortener.App.Backend.Business.IJwtTokenGenerator.html": {
    "href": "api/UrlShortener.App.Backend.Business.IJwtTokenGenerator.html",
    "title": "Interface IJwtTokenGenerator | UrlShortener",
    "summary": "Interface IJwtTokenGenerator Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll Provides functionality for generating JSON Web Tokens (JWT). public interface IJwtTokenGenerator Methods GenerateToken(string) Generates a JWT token for the specified email address. string GenerateToken(string email) Parameters email string The email address for which to generate the token. Returns string A signed JWT token as a string."
  },
  "api/UrlShortener.App.Backend.Business.IMappingsService.html": {
    "href": "api/UrlShortener.App.Backend.Business.IMappingsService.html",
    "title": "Interface IMappingsService | UrlShortener",
    "summary": "Interface IMappingsService Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll Service to manage URL mappings public interface IMappingsService Methods CreateMapping(string, string, string) Create a new mapping for a long URL Task<UrlMapping?> CreateMapping(string longUrl, string name, string email) Parameters longUrl string Long url name string Name of mapping email string Email of user Returns Task<UrlMapping> DeleteMapping(string, int) Delete a mapping of a user by its id Task<bool> DeleteMapping(string email, int mappingId) Parameters email string Email of the user mappingId int Id of the mapping Returns Task<bool> True, if it was successfully deleted GetMappingByPath(string) Get a mapping by its short url path Task<UrlMapping?> GetMappingByPath(string path) Parameters path string Path Returns Task<UrlMapping> UrlMapping with matching path GetMappingsByUser(string) Get all mappings of a user Task<List<UrlMapping>?> GetMappingsByUser(string email) Parameters email string Email of the user Returns Task<List<UrlMapping>> All mappings found"
  },
  "api/UrlShortener.App.Backend.Business.IRedirectLogService.html": {
    "href": "api/UrlShortener.App.Backend.Business.IRedirectLogService.html",
    "title": "Interface IRedirectLogService | UrlShortener",
    "summary": "Interface IRedirectLogService Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll Provides functionality for logging redirect events for shortened URLs. public interface IRedirectLogService Methods LogRedirectAsync(UrlMapping, UserAgentApiResponse?, string?, string?) Logs a redirect event, capturing metadata such as the user's IP address, user agent, and device information. Task LogRedirectAsync(UrlMapping urlMapping, UserAgentApiResponse? userAgentApiResponse, string? ipAddress, string? userAgent) Parameters urlMapping UrlMapping The URL mapping associated with the redirection. userAgentApiResponse UserAgentApiResponse Optional parsed user agent data, such as browser and device info. ipAddress string Optional IP address of the user initiating the redirect. userAgent string Optional raw user agent string of the user's browser. Returns Task A task representing the asynchronous logging operation."
  },
  "api/UrlShortener.App.Backend.Business.IUserAgentService.html": {
    "href": "api/UrlShortener.App.Backend.Business.IUserAgentService.html",
    "title": "Interface IUserAgentService | UrlShortener",
    "summary": "Interface IUserAgentService Namespace UrlShortener.App.Backend.Business Assembly UrlShortener.App.Backend.dll Provides functionality for retrieving and parsing user agent information from a user’s browser. public interface IUserAgentService Methods GetUserAgentAsync(string) Retrieves and parses user agent data from the provided user agent string. Task<UserAgentApiResponse?> GetUserAgentAsync(string userAgent) Parameters userAgent string The raw user agent string from the user's browser. Returns Task<UserAgentApiResponse> A task that represents the asynchronous operation. The task result contains the parsed UserAgentApiResponse, or null if parsing failed or no data was returned."
  },
  "api/UrlShortener.App.Backend.Business.html": {
    "href": "api/UrlShortener.App.Backend.Business.html",
    "title": "Namespace UrlShortener.App.Backend.Business | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Business Interfaces IJwtTokenGenerator Provides functionality for generating JSON Web Tokens (JWT). IMappingsService Service to manage URL mappings IRedirectLogService Provides functionality for logging redirect events for shortened URLs. IUserAgentService Provides functionality for retrieving and parsing user agent information from a user’s browser."
  },
  "api/UrlShortener.App.Backend.Controllers.AuthController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.AuthController.html",
    "title": "Class AuthController | UrlShortener",
    "summary": "Class AuthController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll Controller responsible for user authentication, including login and registration endpoints. [Route(\"api/auth\")] [ApiController] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Relies on IJwtTokenGenerator for JWT creation and AppDbContext for user persistence. Constructors AuthController(IJwtTokenGenerator, AppDbContext) Controller responsible for user authentication, including login and registration endpoints. public AuthController(IJwtTokenGenerator JwtTokenGenerator, AppDbContext DbContext) Parameters JwtTokenGenerator IJwtTokenGenerator DbContext AppDbContext Remarks Relies on IJwtTokenGenerator for JWT creation and AppDbContext for user persistence. Methods Login(LoginRequestDto) Authenticates a user and returns a JWT token if credentials are valid. [HttpPost(\"login\")] public IActionResult Login(LoginRequestDto request) Parameters request LoginRequestDto The login request containing the user's email and password. Returns IActionResult OkObjectResult with a LoginResponseDto containing the JWT token, or UnauthorizedObjectResult if the credentials are invalid. Register(RegisterRequestDto) Registers a new user and stores their credentials securely. [HttpPost(\"register\")] public Task<IActionResult> Register(RegisterRequestDto request) Parameters request RegisterRequestDto The registration request containing the user's email and password. Returns Task<IActionResult> OkObjectResult with a successful RegisterResponseDto if registration succeeds, or a BadRequestObjectResult or ConflictObjectResult with an appropriate error."
  },
  "api/UrlShortener.App.Backend.Controllers.HealthCheckController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.HealthCheckController.html",
    "title": "Class HealthCheckController | UrlShortener",
    "summary": "Class HealthCheckController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll Simple controller for checking the health status of the API. Useful for uptime monitoring and infrastructure health checks. [ApiController] [Route(\"api/health\")] public class HealthCheckController : ControllerBase Inheritance object ControllerBase HealthCheckController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get() Returns a basic health check response. [HttpGet] public IActionResult Get() Returns IActionResult OkObjectResult containing the current status and a UTC timestamp."
  },
  "api/UrlShortener.App.Backend.Controllers.MappingsController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.MappingsController.html",
    "title": "Class MappingsController | UrlShortener",
    "summary": "Class MappingsController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll Controller responsible for managing URL mappings for authenticated users. Allows users to create, retrieve, delete, and view statistics for their shortened URLs. [ApiController] [Route(\"api/mappings\")] [Authorize] public class MappingsController : ControllerBase Inheritance object ControllerBase MappingsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappingsController(IMappingsService) Controller responsible for managing URL mappings for authenticated users. Allows users to create, retrieve, delete, and view statistics for their shortened URLs. public MappingsController(IMappingsService MappingsService) Parameters MappingsService IMappingsService Methods CreateMapping(CreateMappingRequestDto) Creates a new URL mapping (shortens a URL). [HttpPost(\"create\")] public Task<IActionResult> CreateMapping(CreateMappingRequestDto createMappingRequest) Parameters createMappingRequest CreateMappingRequestDto Request containing the long URL and a name for the mapping. Returns Task<IActionResult> OkObjectResult with a CreateMappingResponseDto containing the shortened URL, or BadRequestObjectResult if the input is invalid or creation fails. DeleteMapping(int) Deletes a specific URL mapping by ID. [HttpDelete(\"{mappingId}\")] public Task<IActionResult> DeleteMapping(int mappingId) Parameters mappingId int The ID of the mapping to delete. Returns Task<IActionResult> OkObjectResult if the deletion is successful, or BadRequestObjectResult if deletion fails. GetMappings() Retrieves all URL mappings for the authenticated user. [HttpGet(\"all\")] public Task<IActionResult> GetMappings() Returns Task<IActionResult> OkObjectResult with a list of mappings, or NotFoundObjectResult if no mappings exist. GetStats() Retrieves statistics for the authenticated user, such as total number of mappings and total clicks. [HttpGet(\"stats\")] public Task<IActionResult> GetStats() Returns Task<IActionResult> OkObjectResult containing a UserStatsDto with the user's statistics."
  },
  "api/UrlShortener.App.Backend.Controllers.RedirectController.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.RedirectController.html",
    "title": "Class RedirectController | UrlShortener",
    "summary": "Class RedirectController Namespace UrlShortener.App.Backend.Controllers Assembly UrlShortener.App.Backend.dll Controller responsible for handling redirection from short URLs to their corresponding long URLs. [ApiController] [Route(\"/\")] [AllowAnonymous] public class RedirectController : ControllerBase Inheritance object ControllerBase RedirectController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This controller is publicly accessible and does not require authentication. It also logs redirect metadata including IP address and user agent details. Constructors RedirectController(IMappingsService, IRedirectLogService, IUserAgentService) Controller responsible for handling redirection from short URLs to their corresponding long URLs. public RedirectController(IMappingsService MappingsService, IRedirectLogService RedirectLogService, IUserAgentService UserAgentService) Parameters MappingsService IMappingsService RedirectLogService IRedirectLogService UserAgentService IUserAgentService Remarks This controller is publicly accessible and does not require authentication. It also logs redirect metadata including IP address and user agent details. Methods RedirectToLongUrl(string) Redirects a short URL path to its original long URL. [HttpGet(\"{path}\")] public Task<IActionResult> RedirectToLongUrl(string path) Parameters path string The short URL path to resolve and redirect. Returns Task<IActionResult> RedirectResult to the original URL if found; otherwise, NotFoundResult."
  },
  "api/UrlShortener.App.Backend.Controllers.html": {
    "href": "api/UrlShortener.App.Backend.Controllers.html",
    "title": "Namespace UrlShortener.App.Backend.Controllers | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Controllers Classes AuthController Controller responsible for user authentication, including login and registration endpoints. HealthCheckController Simple controller for checking the health status of the API. Useful for uptime monitoring and infrastructure health checks. MappingsController Controller responsible for managing URL mappings for authenticated users. Allows users to create, retrieve, delete, and view statistics for their shortened URLs. RedirectController Controller responsible for handling redirection from short URLs to their corresponding long URLs."
  },
  "api/UrlShortener.App.Backend.Middleware.DelayMiddleware.html": {
    "href": "api/UrlShortener.App.Backend.Middleware.DelayMiddleware.html",
    "title": "Class DelayMiddleware | UrlShortener",
    "summary": "Class DelayMiddleware Namespace UrlShortener.App.Backend.Middleware Assembly UrlShortener.App.Backend.dll Middleware that introduces an artificial delay for authentication-related requests to mitigate brute-force or timing attacks. public class DelayMiddleware : IMiddleware Inheritance object DelayMiddleware Implements IMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Applies a base delay of 500ms with up to 200ms of jitter to all requests targeting the /api/auth path. Constructors DelayMiddleware(ILogger<DelayMiddleware>) Middleware that introduces an artificial delay for authentication-related requests to mitigate brute-force or timing attacks. public DelayMiddleware(ILogger<DelayMiddleware> logger) Parameters logger ILogger<DelayMiddleware> Remarks Applies a base delay of 500ms with up to 200ms of jitter to all requests targeting the /api/auth path. Methods InvokeAsync(HttpContext, RequestDelegate) Executes the middleware logic, adding a delay to requests under the /api/auth path. public Task InvokeAsync(HttpContext context, RequestDelegate next) Parameters context HttpContext The current HTTP context. next RequestDelegate The delegate representing the next middleware in the pipeline. Returns Task A task that represents the asynchronous operation."
  },
  "api/UrlShortener.App.Backend.Middleware.html": {
    "href": "api/UrlShortener.App.Backend.Middleware.html",
    "title": "Namespace UrlShortener.App.Backend.Middleware | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Middleware Classes DelayMiddleware Middleware that introduces an artificial delay for authentication-related requests to mitigate brute-force or timing attacks."
  },
  "api/UrlShortener.App.Backend.Migrations.InitialMigration.html": {
    "href": "api/UrlShortener.App.Backend.Migrations.InitialMigration.html",
    "title": "Class InitialMigration | UrlShortener",
    "summary": "Class InitialMigration Namespace UrlShortener.App.Backend.Migrations Assembly UrlShortener.App.Backend.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20250409151853_InitialMigration\")] public class InitialMigration : Migration Inheritance object Migration InitialMigration Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/UrlShortener.App.Backend.Migrations.html": {
    "href": "api/UrlShortener.App.Backend.Migrations.html",
    "title": "Namespace UrlShortener.App.Backend.Migrations | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Migrations Classes InitialMigration A base class inherited by each EF Core migration."
  },
  "api/UrlShortener.App.Backend.Models.UserAgentApiResponse.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentApiResponse.html",
    "title": "Class UserAgentApiResponse | UrlShortener",
    "summary": "Class UserAgentApiResponse Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll Represents parsed user agent information returned by an external user agent API. public class UserAgentApiResponse Inheritance object UserAgentApiResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BrowserFamily Gets or sets the browser family (e.g., Chrome, Firefox, Safari). [JsonPropertyName(\"browser_family\")] public string BrowserFamily { get; set; } Property Value string Client Gets or sets detailed client information such as name, type, and engine. [JsonPropertyName(\"client\")] public UserAgentClient? Client { get; set; } Property Value UserAgentClient Device Gets or sets the device information such as brand, model, and type. [JsonPropertyName(\"device\")] public UserAgentDevice? Device { get; set; } Property Value UserAgentDevice Os Gets or sets the operating system information including name and version. [JsonPropertyName(\"os\")] public UserAgentOs? Os { get; set; } Property Value UserAgentOs OsFamily Gets or sets the operating system family (e.g., Windows, macOS, Linux). [JsonPropertyName(\"os_family\")] public string OsFamily { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.UserAgentClient.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentClient.html",
    "title": "Class UserAgentClient | UrlShortener",
    "summary": "Class UserAgentClient Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll Represents detailed information about the client software making the request, such as a browser or app, extracted from the user agent string. public class UserAgentClient Inheritance object UserAgentClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Engine Gets or sets the name of the rendering engine used by the client (e.g., Blink, Gecko). [JsonPropertyName(\"engine\")] public string Engine { get; set; } Property Value string EngineVersion Gets or sets the version of the rendering engine. [JsonPropertyName(\"engine_version\")] public string EngineVersion { get; set; } Property Value string Name Gets or sets the name of the client (e.g., Chrome, Firefox, Safari). [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Type Gets or sets the type of client (e.g., browser, mobile app, feed reader). [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string Version Gets or sets the version of the client software. [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.UserAgentDevice.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentDevice.html",
    "title": "Class UserAgentDevice | UrlShortener",
    "summary": "Class UserAgentDevice Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll Represents information about the physical device extracted from the user agent string. public class UserAgentDevice Inheritance object UserAgentDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Brand Gets or sets the brand of the device (e.g., Apple, Samsung, Google). [JsonPropertyName(\"brand\")] public string Brand { get; set; } Property Value string Model Gets or sets the model of the device (e.g., iPhone 13, Galaxy S22). [JsonPropertyName(\"model\")] public string Model { get; set; } Property Value string Type Gets or sets the type of device (e.g., smartphone, tablet, desktop). [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.UserAgentOs.html": {
    "href": "api/UrlShortener.App.Backend.Models.UserAgentOs.html",
    "title": "Class UserAgentOs | UrlShortener",
    "summary": "Class UserAgentOs Namespace UrlShortener.App.Backend.Models Assembly UrlShortener.App.Backend.dll Represents information about the operating system extracted from the user agent string. public class UserAgentOs Inheritance object UserAgentOs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of the operating system (e.g., Windows, macOS, Android). [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Platform Gets or sets the platform or architecture of the operating system (e.g., x86_64, ARM). [JsonPropertyName(\"platform\")] public string Platform { get; set; } Property Value string Version Gets or sets the version of the operating system. [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Backend.Models.html": {
    "href": "api/UrlShortener.App.Backend.Models.html",
    "title": "Namespace UrlShortener.App.Backend.Models | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend.Models Classes UserAgentApiResponse Represents parsed user agent information returned by an external user agent API. UserAgentClient Represents detailed information about the client software making the request, such as a browser or app, extracted from the user agent string. UserAgentDevice Represents information about the physical device extracted from the user agent string. UserAgentOs Represents information about the operating system extracted from the user agent string."
  },
  "api/UrlShortener.App.Backend.Program.html": {
    "href": "api/UrlShortener.App.Backend.Program.html",
    "title": "Class Program | UrlShortener",
    "summary": "Class Program Namespace UrlShortener.App.Backend Assembly UrlShortener.App.Backend.dll Entry point of the URL shortener web application. Configures services, middleware, authentication, and database migrations. public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Program() Protected constructor to prevent instantiation. protected Program() Methods Main(string[]) The main entry point of the application. public static void Main(string[] args) Parameters args string[] Command-line arguments."
  },
  "api/UrlShortener.App.Backend.html": {
    "href": "api/UrlShortener.App.Backend.html",
    "title": "Namespace UrlShortener.App.Backend | UrlShortener",
    "summary": "Namespace UrlShortener.App.Backend Namespaces UrlShortener.App.Backend.Business UrlShortener.App.Backend.Controllers UrlShortener.App.Backend.Middleware UrlShortener.App.Backend.Migrations UrlShortener.App.Backend.Models Classes AppDbContext Database context for the application. Program Entry point of the URL shortener web application. Configures services, middleware, authentication, and database migrations."
  },
  "api/UrlShortener.App.Blazor.Client.Api.AuthApi.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Api.AuthApi.html",
    "title": "Class AuthApi | UrlShortener",
    "summary": "Class AuthApi Namespace UrlShortener.App.Blazor.Client.Api Assembly UrlShortener.App.Blazor.Client.dll Implementation of IAuthApi that communicates with the backend authentication API using HttpClient. public class AuthApi : IAuthApi Inheritance object AuthApi Implements IAuthApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthApi(HttpClient) Implementation of IAuthApi that communicates with the backend authentication API using HttpClient. public AuthApi(HttpClient HttpClient) Parameters HttpClient HttpClient Methods Login(string, string) Sends a login request to the API with the specified email and password. public Task<string?> Login(string email, string password) Parameters email string The user's email address. password string The user's password. Returns Task<string> A task representing the asynchronous operation. The result contains a JWT token string if the login is successful; otherwise, null. Register(string, string) Sends a registration request to the API with the specified email and password. public Task<RegisterResponseDto?> Register(string email, string password) Parameters email string The email address for the new user. password string The password for the new user. Returns Task<RegisterResponseDto> A task representing the asynchronous operation. The result contains a RegisterResponseDto with the outcome of the registration, or null if parsing fails."
  },
  "api/UrlShortener.App.Blazor.Client.Api.IAuthApi.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Api.IAuthApi.html",
    "title": "Interface IAuthApi | UrlShortener",
    "summary": "Interface IAuthApi Namespace UrlShortener.App.Blazor.Client.Api Assembly UrlShortener.App.Blazor.Client.dll Defines methods for communicating with the authentication API, such as logging in and registering users. public interface IAuthApi Methods Login(string, string) Sends a login request with the provided credentials and retrieves a JWT token if successful. Task<string?> Login(string email, string password) Parameters email string The user's email address. password string The user's password. Returns Task<string> A task representing the asynchronous operation. The result contains the JWT token string if successful, or null if authentication fails. Register(string, string) Sends a registration request to create a new user account. Task<RegisterResponseDto?> Register(string email, string password) Parameters email string The email address for the new account. password string The password for the new account. Returns Task<RegisterResponseDto> A task representing the asynchronous operation. The result contains the registration response, or null if the request fails."
  },
  "api/UrlShortener.App.Blazor.Client.Api.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Api.html",
    "title": "Namespace UrlShortener.App.Blazor.Client.Api | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor.Client.Api Classes AuthApi Implementation of IAuthApi that communicates with the backend authentication API using HttpClient. Interfaces IAuthApi Defines methods for communicating with the authentication API, such as logging in and registering users."
  },
  "api/UrlShortener.App.Blazor.Client.Business.AppAuthenticationStateProvider.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.AppAuthenticationStateProvider.html",
    "title": "Class AppAuthenticationStateProvider | UrlShortener",
    "summary": "Class AppAuthenticationStateProvider Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll Provides the authentication state for the Blazor application using JWT stored in sessionStorage. Inherits from AuthenticationStateProvider. public class AppAuthenticationStateProvider : AuthenticationStateProvider Inheritance object AuthenticationStateProvider AppAuthenticationStateProvider Inherited Members AuthenticationStateProvider.NotifyAuthenticationStateChanged(Task<AuthenticationState>) AuthenticationStateProvider.AuthenticationStateChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppAuthenticationStateProvider(IJSRuntime) Provides the authentication state for the Blazor application using JWT stored in sessionStorage. Inherits from AuthenticationStateProvider. public AppAuthenticationStateProvider(IJSRuntime JsRuntime) Parameters JsRuntime IJSRuntime Methods GetAuthenticationStateAsync() Gets the current authentication state, including user claims if a valid JWT token is present. public override Task<AuthenticationState> GetAuthenticationStateAsync() Returns Task<AuthenticationState> A task that represents the asynchronous operation. The result contains the current AuthenticationState. GetToken() Returns the current JWT token. public string? GetToken() Returns string The JWT token as a string, or null if not set. MarkUserAsLoggedOut() Clears the current authentication token, removes it from sessionStorage, and notifies the application of the logout. public Task MarkUserAsLoggedOut() Returns Task TryMarkUserAsAuthenticated(string?) Sets the authentication token, persists it to sessionStorage, and notifies the application of the updated auth state. public Task TryMarkUserAsAuthenticated(string? token) Parameters token string The JWT token to set. Returns Task"
  },
  "api/UrlShortener.App.Blazor.Client.Business.AuthService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.AuthService.html",
    "title": "Class AuthService | UrlShortener",
    "summary": "Class AuthService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll Implementation of IAuthService that handles authentication and registration logic. Coordinates API calls, authentication state updates, navigation, and user notifications. public class AuthService : IAuthService Inheritance object AuthService Implements IAuthService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Depends on IAuthApi for backend communication, Blazorise.INotificationService for user feedback, AuthenticationStateProvider for authentication state management, and NavigationManager for routing. Constructors AuthService(IAuthApi, INotificationService, AuthenticationStateProvider, NavigationManager) Implementation of IAuthService that handles authentication and registration logic. Coordinates API calls, authentication state updates, navigation, and user notifications. public AuthService(IAuthApi AuthApi, INotificationService NotificationService, AuthenticationStateProvider AuthenticationStateProvider, NavigationManager NavigationManager) Parameters AuthApi IAuthApi NotificationService INotificationService AuthenticationStateProvider AuthenticationStateProvider NavigationManager NavigationManager Remarks Depends on IAuthApi for backend communication, Blazorise.INotificationService for user feedback, AuthenticationStateProvider for authentication state management, and NavigationManager for routing. Methods LoginAsync(string, string) Attempts to log in the user with the provided credentials. If successful, updates the authentication state and navigates to the home page. Otherwise, shows an error notification. public Task LoginAsync(string username, string password) Parameters username string The user's email or username. password string The user's password. Returns Task RegisterAsync(string, string) Attempts to register a new user with the provided credentials. On success, redirects to the home page. On failure, displays an appropriate error message. public Task RegisterAsync(string username, string password) Parameters username string The user's email or username. password string The user's password. Returns Task"
  },
  "api/UrlShortener.App.Blazor.Client.Business.BrowserTimeProvider.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.BrowserTimeProvider.html",
    "title": "Class BrowserTimeProvider | UrlShortener",
    "summary": "Class BrowserTimeProvider Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll Provides time zone information based on the user's browser settings. Inherits from TimeProvider and overrides the local time zone with the one provided by the browser. public class BrowserTimeProvider : TimeProvider Inheritance object TimeProvider BrowserTimeProvider Inherited Members TimeProvider.CreateTimer(TimerCallback, object, TimeSpan, TimeSpan) TimeProvider.GetElapsedTime(long) TimeProvider.GetElapsedTime(long, long) TimeProvider.GetLocalNow() TimeProvider.GetTimestamp() TimeProvider.GetUtcNow() TimeProvider.System TimeProvider.TimestampFrequency object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LocalTimeZone Gets the browser-provided local time zone if set; otherwise falls back to the base implementation. public override TimeZoneInfo LocalTimeZone { get; } Property Value TimeZoneInfo Methods SetBrowserTimeZone(string) Sets the local time zone based on the provided time zone ID (from the browser). If the time zone changes, the LocalTimeZoneChanged event is raised. public virtual void SetBrowserTimeZone(string timeZone) Parameters timeZone string Events LocalTimeZoneChanged Occurs when the local time zone is changed via SetBrowserTimeZone(string). public event EventHandler? LocalTimeZoneChanged Event Type EventHandler"
  },
  "api/UrlShortener.App.Blazor.Client.Business.IAuthService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.IAuthService.html",
    "title": "Interface IAuthService | UrlShortener",
    "summary": "Interface IAuthService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll Defines authentication operations, such as logging in and registering users. public interface IAuthService Methods LoginAsync(string, string) Attempts to log in a user with the provided credentials. Task LoginAsync(string username, string password) Parameters username string The user's email or username. password string The user's password. Returns Task A task representing the asynchronous operation. RegisterAsync(string, string) Attempts to register a new user with the provided credentials. Task RegisterAsync(string username, string password) Parameters username string The user's email or username. password string The user's password. Returns Task A task representing the asynchronous operation."
  },
  "api/UrlShortener.App.Blazor.Client.Business.IMappingsService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.IMappingsService.html",
    "title": "Interface IMappingsService | UrlShortener",
    "summary": "Interface IMappingsService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll Defines operations related to URL mappings, such as creation, retrieval, deletion, and statistics. public interface IMappingsService Methods CreateMapping(string, string?) Creates a new shortened URL mapping. Task<CreateMappingResponseDto?> CreateMapping(string longUrl, string? name = null) Parameters longUrl string The original long URL to shorten. name string An optional name to identify the mapping. Returns Task<CreateMappingResponseDto> A task representing the asynchronous operation. The result contains a CreateMappingResponseDto if creation is successful, or null otherwise. DeleteMapping(UrlMappingDto) Deletes the specified URL mapping. Task<bool> DeleteMapping(UrlMappingDto mapping) Parameters mapping UrlMappingDto The mapping to delete. Returns Task<bool> A task representing the asynchronous operation. The result is true if deletion succeeds; otherwise, false. GetMappings() Retrieves all URL mappings for the currently authenticated user. Task<List<UrlMappingDto>?> GetMappings() Returns Task<List<UrlMappingDto>> A task representing the asynchronous operation. The result contains a list of UrlMappingDtos, or null if retrieval fails. GetStats() Retrieves user statistics, including total mappings and total redirect clicks. Task<UserStatsDto?> GetStats() Returns Task<UserStatsDto> A task representing the asynchronous operation. The result contains a UserStatsDto, or null if unavailable."
  },
  "api/UrlShortener.App.Blazor.Client.Business.MappingsService.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.MappingsService.html",
    "title": "Class MappingsService | UrlShortener",
    "summary": "Class MappingsService Namespace UrlShortener.App.Blazor.Client.Business Assembly UrlShortener.App.Blazor.Client.dll Implementation of IMappingsService that communicates with the backend to manage URL mappings. Handles creation, retrieval, deletion, and statistics via authenticated HTTP requests. public class MappingsService : IMappingsService Inheritance object MappingsService Implements IMappingsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Uses HttpClient for API calls, AuthenticationStateProvider for JWT access, and NavigationManager for redirecting unauthorized users. Constructors MappingsService(HttpClient, AuthenticationStateProvider, NavigationManager) Implementation of IMappingsService that communicates with the backend to manage URL mappings. Handles creation, retrieval, deletion, and statistics via authenticated HTTP requests. public MappingsService(HttpClient HttpClient, AuthenticationStateProvider AuthenticationStateProvider, NavigationManager NavigationManager) Parameters HttpClient HttpClient AuthenticationStateProvider AuthenticationStateProvider NavigationManager NavigationManager Remarks Uses HttpClient for API calls, AuthenticationStateProvider for JWT access, and NavigationManager for redirecting unauthorized users. Methods CreateMapping(string, string?) Creates a new shortened URL mapping. public Task<CreateMappingResponseDto?> CreateMapping(string longUrl, string? name = null) Parameters longUrl string The original long URL to shorten. name string An optional name to identify the mapping. Returns Task<CreateMappingResponseDto> A task representing the asynchronous operation. The result contains a CreateMappingResponseDto if creation is successful, or null otherwise. DeleteMapping(UrlMappingDto) Deletes the specified URL mapping. public Task<bool> DeleteMapping(UrlMappingDto mapping) Parameters mapping UrlMappingDto The mapping to delete. Returns Task<bool> A task representing the asynchronous operation. The result is true if deletion succeeds; otherwise, false. GetMappings() Retrieves all URL mappings for the currently authenticated user. public Task<List<UrlMappingDto>?> GetMappings() Returns Task<List<UrlMappingDto>> A task representing the asynchronous operation. The result contains a list of UrlMappingDtos, or null if retrieval fails. GetStats() Retrieves user statistics, including total mappings and total redirect clicks. public Task<UserStatsDto?> GetStats() Returns Task<UserStatsDto> A task representing the asynchronous operation. The result contains a UserStatsDto, or null if unavailable."
  },
  "api/UrlShortener.App.Blazor.Client.Business.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Business.html",
    "title": "Namespace UrlShortener.App.Blazor.Client.Business | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor.Client.Business Classes AppAuthenticationStateProvider Provides the authentication state for the Blazor application using JWT stored in sessionStorage. Inherits from AuthenticationStateProvider. AuthService Implementation of IAuthService that handles authentication and registration logic. Coordinates API calls, authentication state updates, navigation, and user notifications. BrowserTimeProvider Provides time zone information based on the user's browser settings. Inherits from TimeProvider and overrides the local time zone with the one provided by the browser. MappingsService Implementation of IMappingsService that communicates with the backend to manage URL mappings. Handles creation, retrieval, deletion, and statistics via authenticated HTTP requests. Interfaces IAuthService Defines authentication operations, such as logging in and registering users. IMappingsService Defines operations related to URL mappings, such as creation, retrieval, deletion, and statistics."
  },
  "api/UrlShortener.App.Blazor.Client.Program.html": {
    "href": "api/UrlShortener.App.Blazor.Client.Program.html",
    "title": "Class Program | UrlShortener",
    "summary": "Class Program Namespace UrlShortener.App.Blazor.Client Assembly UrlShortener.App.Blazor.Client.dll Entry point for the Blazor WebAssembly client application. Sets up the host and launches the app in the browser. public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UrlShortener.App.Blazor.Client.html": {
    "href": "api/UrlShortener.App.Blazor.Client.html",
    "title": "Namespace UrlShortener.App.Blazor.Client | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor.Client Namespaces UrlShortener.App.Blazor.Client.Api UrlShortener.App.Blazor.Client.Business Classes Program Entry point for the Blazor WebAssembly client application. Sets up the host and launches the app in the browser."
  },
  "api/UrlShortener.App.Blazor.Program.html": {
    "href": "api/UrlShortener.App.Blazor.Program.html",
    "title": "Class Program | UrlShortener",
    "summary": "Class Program Namespace UrlShortener.App.Blazor Assembly UrlShortener.App.Blazor.dll Entry point for the Blazor Server application. Configures services, HTTP clients, authentication, and UI frameworks, and starts the web host. public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Program() Protected constructor to prevent instantiation. protected Program() Methods Main(string[]) Configures and launches the Blazor Server application. public static void Main(string[] args) Parameters args string[] Command-line arguments passed to the application."
  },
  "api/UrlShortener.App.Blazor.html": {
    "href": "api/UrlShortener.App.Blazor.html",
    "title": "Namespace UrlShortener.App.Blazor | UrlShortener",
    "summary": "Namespace UrlShortener.App.Blazor Namespaces UrlShortener.App.Blazor.Client Classes Program Entry point for the Blazor Server application. Configures services, HTTP clients, authentication, and UI frameworks, and starts the web host."
  },
  "api/UrlShortener.App.Shared.Dto.ClickDataPointDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.ClickDataPointDto.html",
    "title": "Class ClickDataPointDto | UrlShortener",
    "summary": "Class ClickDataPointDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents a data point for click statistics, including the timestamp and number of clicks. public class ClickDataPointDto Inheritance object ClickDataPointDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Clicks Number of clicks at this timestamp public int Clicks { get; set; } Property Value int DateTime Timestamp of click public DateTime DateTime { get; set; } Property Value DateTime"
  },
  "api/UrlShortener.App.Shared.Dto.CreateMappingRequestDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.CreateMappingRequestDto.html",
    "title": "Class CreateMappingRequestDto | UrlShortener",
    "summary": "Class CreateMappingRequestDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the request payload for creating a new shortened URL mapping. public class CreateMappingRequestDto Inheritance object CreateMappingRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LongUrl Gets or sets the original long URL to be shortened. [JsonPropertyName(\"long_url\")] public string LongUrl { get; set; } Property Value string Name Gets or sets an custom name or label for the URL mapping. [JsonPropertyName(\"name\")] public string? Name { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.CreateMappingResponseDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.CreateMappingResponseDto.html",
    "title": "Class CreateMappingResponseDto | UrlShortener",
    "summary": "Class CreateMappingResponseDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the response returned after successfully creating a shortened URL mapping. public class CreateMappingResponseDto Inheritance object CreateMappingResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ShortUrl Gets or sets the generated short URL. [JsonPropertyName(\"short_url\")] public string ShortUrl { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.DeviceTypeDataPointDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.DeviceTypeDataPointDto.html",
    "title": "Class DeviceTypeDataPointDto | UrlShortener",
    "summary": "Class DeviceTypeDataPointDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents a data transfer object for device type statistics of URL mappings. public class DeviceTypeDataPointDto Inheritance object DeviceTypeDataPointDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Clicks Number of clicks [JsonPropertyName(\"clicks\")] public int Clicks { get; set; } Property Value int DeviceType Device type (e.g., \"Desktop\", \"Mobile\", \"Tablet\") [JsonPropertyName(\"deviceType\")] public required string DeviceType { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.LoginRequestDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.LoginRequestDto.html",
    "title": "Class LoginRequestDto | UrlShortener",
    "summary": "Class LoginRequestDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the request payload for logging in a user. public class LoginRequestDto Inheritance object LoginRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets the user's email address used for login. [JsonPropertyName(\"email\")] public string Email { get; init; } Property Value string Password Gets the user's password used for login. [JsonPropertyName(\"password\")] public string Password { get; init; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.LoginResponseDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.LoginResponseDto.html",
    "title": "Class LoginResponseDto | UrlShortener",
    "summary": "Class LoginResponseDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the response returned after a successful login request. public class LoginResponseDto Inheritance object LoginResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Token Gets or sets the JWT token issued to the authenticated user. [JsonPropertyName(\"token\")] public string Token { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.RedirectLogDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RedirectLogDto.html",
    "title": "Class RedirectLogDto | UrlShortener",
    "summary": "Class RedirectLogDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents a log entry for a URL redirection, including access metadata and client details. public class RedirectLogDto Inheritance object RedirectLogDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessedAt Gets or sets the UTC timestamp when the redirect occurred. [JsonPropertyName(\"accessed_at\")] public DateTime AccessedAt { get; set; } Property Value DateTime BrowserFamily Gets or sets the browser family name (e.g., Chrome, Firefox). [JsonPropertyName(\"browser_family\")] public string? BrowserFamily { get; set; } Property Value string ClientEngine Gets or sets the engine used by the client (e.g., Blink, Gecko). [JsonPropertyName(\"client_engine\")] public string? ClientEngine { get; set; } Property Value string ClientName Gets or sets the name of the client (e.g., Chrome, Safari). [JsonPropertyName(\"client_name\")] public string? ClientName { get; set; } Property Value string ClientType Gets or sets the type of client (e.g., browser, app). [JsonPropertyName(\"client_type\")] public string? ClientType { get; set; } Property Value string DeviceBrand Gets or sets the brand of the device (e.g., Apple, Samsung). [JsonPropertyName(\"device_brand\")] public string? DeviceBrand { get; set; } Property Value string DeviceModel Gets or sets the model of the device (e.g., iPhone 13, Galaxy S21). [JsonPropertyName(\"device_model\")] public string? DeviceModel { get; set; } Property Value string DeviceType Gets or sets the type of device (e.g., smartphone, tablet, desktop). [JsonPropertyName(\"device_type\")] public string? DeviceType { get; set; } Property Value string Id Gets or sets the unique identifier of the redirect log entry. [JsonPropertyName(\"id\")] public int Id { get; set; } Property Value int IpAddress Gets or sets the IP address of the user who triggered the redirect. [JsonPropertyName(\"ip_address\")] public string? IpAddress { get; set; } Property Value string OsFamily Gets or sets the operating system family (e.g., Windows, macOS, Linux). [JsonPropertyName(\"os_family\")] public string? OsFamily { get; set; } Property Value string OsName Gets or sets the name of the operating system (e.g., Windows, iOS). [JsonPropertyName(\"os_name\")] public string? OsName { get; set; } Property Value string OsVersion Gets or sets the version of the operating system. [JsonPropertyName(\"os_version\")] public string? OsVersion { get; set; } Property Value string UserAgent Gets or sets the raw user agent string from the user's browser. [JsonPropertyName(\"user_agent\")] public string? UserAgent { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.RegisterErrorType.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RegisterErrorType.html",
    "title": "Enum RegisterErrorType | UrlShortener",
    "summary": "Enum RegisterErrorType Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the possible error types that can occur during user registration. public enum RegisterErrorType Fields EmailAlreadyExists = 2 The provided email address is already associated with an existing user. MissingEmailOrPassword = 1 The registration request was missing an email address or password. None = 0 No error occurred. Registration was successful."
  },
  "api/UrlShortener.App.Shared.Dto.RegisterRequestDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RegisterRequestDto.html",
    "title": "Class RegisterRequestDto | UrlShortener",
    "summary": "Class RegisterRequestDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the request payload for registering a new user. public class RegisterRequestDto Inheritance object RegisterRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets the user's email address to register with. [JsonPropertyName(\"email\")] public string Email { get; init; } Property Value string Password Gets the user's chosen password. [JsonPropertyName(\"password\")] public string Password { get; init; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.RegisterResponseDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.RegisterResponseDto.html",
    "title": "Class RegisterResponseDto | UrlShortener",
    "summary": "Class RegisterResponseDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the response returned after a user registration attempt. Indicates whether registration was successful and, if not, the type of error encountered. public class RegisterResponseDto Inheritance object RegisterResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorType Gets or sets the type of error that occurred during registration, if any. [JsonPropertyName(\"error_type\")] public RegisterErrorType ErrorType { get; set; } Property Value RegisterErrorType Success Gets or sets a value indicating whether the registration was successful. [JsonPropertyName(\"success\")] public bool Success { get; set; } Property Value bool"
  },
  "api/UrlShortener.App.Shared.Dto.TimeSeriesStatsDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.TimeSeriesStatsDto.html",
    "title": "Class TimeSeriesStatsDto | UrlShortener",
    "summary": "Class TimeSeriesStatsDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents the data transfer object for time series statistics of URL mappings. public class TimeSeriesStatsDto Inheritance object TimeSeriesStatsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClicksPerDay Represents the total number of clicks for the URL mapping per day. [JsonPropertyName(\"clicksPerDay\")] public IEnumerable<ClickDataPointDto> ClicksPerDay { get; set; } Property Value IEnumerable<ClickDataPointDto> MappingId Represents the unique identifier for the URL mapping. [JsonPropertyName(\"id\")] public int MappingId { get; set; } Property Value int MappingName Represents the name of the URL mapping. [JsonPropertyName(\"name\")] public required string MappingName { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UrlMappingDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UrlMappingDto.html",
    "title": "Class UrlMappingDto | UrlShortener",
    "summary": "Class UrlMappingDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents a shortened URL mapping along with its metadata and redirect logs. public class UrlMappingDto Inheritance object UrlMappingDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the timestamp when the mapping was created (in UTC). [JsonPropertyName(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Id Gets or sets the unique identifier for the URL mapping. [JsonPropertyName(\"id\")] public int Id { get; set; } Property Value int LongUrl Gets or sets the original long URL. [JsonPropertyName(\"long_url\")] public string LongUrl { get; set; } Property Value string Name Gets or sets the optional name or label associated with this URL mapping. [JsonPropertyName(\"name\")] public string? Name { get; set; } Property Value string RedirectLogs Gets or sets the collection of redirect logs associated with this mapping. [JsonPropertyName(\"redirect_logs\")] public List<RedirectLogDto> RedirectLogs { get; set; } Property Value List<RedirectLogDto> ShortUrl Gets or sets the generated short URL. [JsonPropertyName(\"short_url\")] public string ShortUrl { get; set; } Property Value string User Gets or sets the email address or identifier of the user who created the mapping. [JsonPropertyName(\"user\")] public string? User { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentClientDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentClientDto.html",
    "title": "Class UserAgentClientDto | UrlShortener",
    "summary": "Class UserAgentClientDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents details about the client software (e.g., browser or app) extracted from a user agent string. public class UserAgentClientDto Inheritance object UserAgentClientDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Engine Gets or sets the rendering engine used by the client (e.g., Blink, Gecko). [JsonPropertyName(\"engine\")] public string Engine { get; set; } Property Value string EngineVersion Gets or sets the version of the rendering engine. [JsonPropertyName(\"engine_version\")] public string EngineVersion { get; set; } Property Value string Name Gets or sets the name of the client software (e.g., Chrome, Safari). [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Type Gets or sets the type of client (e.g., browser, mobile app). [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string Version Gets or sets the version of the client software. [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentDeviceDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentDeviceDto.html",
    "title": "Class UserAgentDeviceDto | UrlShortener",
    "summary": "Class UserAgentDeviceDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents information about the user's physical device, extracted from the user agent string. public class UserAgentDeviceDto Inheritance object UserAgentDeviceDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Brand Gets or sets the brand of the device (e.g., Apple, Samsung). [JsonPropertyName(\"brand\")] public string Brand { get; set; } Property Value string Model Gets or sets the model of the device (e.g., iPhone 14, Galaxy S23). [JsonPropertyName(\"model\")] public string Model { get; set; } Property Value string Type Gets or sets the type of the device (e.g., smartphone, tablet, desktop). [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentInfoDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentInfoDto.html",
    "title": "Class UserAgentInfoDto | UrlShortener",
    "summary": "Class UserAgentInfoDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents structured information about a user's environment, parsed from a user agent string. public class UserAgentInfoDto Inheritance object UserAgentInfoDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BrowserFamily Gets or sets the browser family name (e.g., Chrome, Firefox, Safari). [JsonPropertyName(\"browser_family\")] public string BrowserFamily { get; set; } Property Value string Client Gets or sets detailed client information such as browser name, type, and engine. [JsonPropertyName(\"client\")] public UserAgentClientDto? Client { get; set; } Property Value UserAgentClientDto Device Gets or sets information about the user's device, including brand, model, and type. [JsonPropertyName(\"device\")] public UserAgentDeviceDto? Device { get; set; } Property Value UserAgentDeviceDto Os Gets or sets the operating system information such as name and version. [JsonPropertyName(\"os\")] public UserAgentOsDto? Os { get; set; } Property Value UserAgentOsDto OsFamily Gets or sets the operating system family (e.g., Windows, macOS, Android). [JsonPropertyName(\"os_family\")] public string OsFamily { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserAgentOsDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserAgentOsDto.html",
    "title": "Class UserAgentOsDto | UrlShortener",
    "summary": "Class UserAgentOsDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents information about the operating system extracted from the user agent string. public class UserAgentOsDto Inheritance object UserAgentOsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of the operating system (e.g., Windows, macOS, Android). [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value string Platform Gets or sets the platform or architecture of the OS (e.g., x86_64, ARM). [JsonPropertyName(\"platform\")] public string Platform { get; set; } Property Value string Version Gets or sets the version of the operating system. [JsonPropertyName(\"version\")] public string Version { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Dto.UserStatsDto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.UserStatsDto.html",
    "title": "Class UserStatsDto | UrlShortener",
    "summary": "Class UserStatsDto Namespace UrlShortener.App.Shared.Dto Assembly UrlShortener.App.Shared.dll Represents aggregated statistics for a user, including total clicks and total URL mappings. public class UserStatsDto Inheritance object UserStatsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Clicks Gets or sets the total number of redirect clicks across all of the user's URL mappings. [JsonPropertyName(\"clicks\")] public int Clicks { get; set; } Property Value int DeviceTypeStats Gets or sets the statistics related to the device types used for accessing the user's URL mappings. [JsonPropertyName(\"deviceTypeStats\")] public IEnumerable<DeviceTypeDataPointDto> DeviceTypeStats { get; set; } Property Value IEnumerable<DeviceTypeDataPointDto> Mappings Gets or sets the total number of URL mappings created by the user. [JsonPropertyName(\"mappings\")] public int Mappings { get; set; } Property Value int TimeSeriesStats Gets or sets the statistics related to the time series of clicks on the user's URL mappings. [JsonPropertyName(\"timeSeriesStats\")] public IEnumerable<TimeSeriesStatsDto> TimeSeriesStats { get; set; } Property Value IEnumerable<TimeSeriesStatsDto>"
  },
  "api/UrlShortener.App.Shared.Dto.html": {
    "href": "api/UrlShortener.App.Shared.Dto.html",
    "title": "Namespace UrlShortener.App.Shared.Dto | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared.Dto Classes ClickDataPointDto Represents a data point for click statistics, including the timestamp and number of clicks. CreateMappingRequestDto Represents the request payload for creating a new shortened URL mapping. CreateMappingResponseDto Represents the response returned after successfully creating a shortened URL mapping. DeviceTypeDataPointDto Represents a data transfer object for device type statistics of URL mappings. LoginRequestDto Represents the request payload for logging in a user. LoginResponseDto Represents the response returned after a successful login request. RedirectLogDto Represents a log entry for a URL redirection, including access metadata and client details. RegisterRequestDto Represents the request payload for registering a new user. RegisterResponseDto Represents the response returned after a user registration attempt. Indicates whether registration was successful and, if not, the type of error encountered. TimeSeriesStatsDto Represents the data transfer object for time series statistics of URL mappings. UrlMappingDto Represents a shortened URL mapping along with its metadata and redirect logs. UserAgentClientDto Represents details about the client software (e.g., browser or app) extracted from a user agent string. UserAgentDeviceDto Represents information about the user's physical device, extracted from the user agent string. UserAgentInfoDto Represents structured information about a user's environment, parsed from a user agent string. UserAgentOsDto Represents information about the operating system extracted from the user agent string. UserStatsDto Represents aggregated statistics for a user, including total clicks and total URL mappings. Enums RegisterErrorType Represents the possible error types that can occur during user registration."
  },
  "api/UrlShortener.App.Shared.Extensions.DtoExtensions.html": {
    "href": "api/UrlShortener.App.Shared.Extensions.DtoExtensions.html",
    "title": "Class DtoExtensions | UrlShortener",
    "summary": "Class DtoExtensions Namespace UrlShortener.App.Shared.Extensions Assembly UrlShortener.App.Shared.dll Provides extension methods for converting entity models to their corresponding DTO representations. public static class DtoExtensions Inheritance object DtoExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetStats(IEnumerable<UrlMapping>) Converts a collection of UrlMapping entities to a UserStatsDto containing aggregated statistics. public static UserStatsDto GetStats(this IEnumerable<UrlMapping> userMappings) Parameters userMappings IEnumerable<UrlMapping> List of mappings Returns UserStatsDto A UserStatsDto containing statistics about the user's URL mappings. ToDto(RedirectLog) Converts a RedirectLog entity to a RedirectLogDto for use in API responses. public static RedirectLogDto ToDto(this RedirectLog redirectLog) Parameters redirectLog RedirectLog The redirect log entity to convert. Returns RedirectLogDto A RedirectLogDto representing the redirect log. ToDto(UrlMapping, HttpRequest) Converts a UrlMapping entity to a UrlMappingDto for use in API responses. public static UrlMappingDto ToDto(this UrlMapping urlMapping, HttpRequest httpRequest) Parameters urlMapping UrlMapping The URL mapping entity to convert. httpRequest HttpRequest The current HTTP request, used to build the full short URL. Returns UrlMappingDto A UrlMappingDto representing the URL mapping."
  },
  "api/UrlShortener.App.Shared.Extensions.html": {
    "href": "api/UrlShortener.App.Shared.Extensions.html",
    "title": "Namespace UrlShortener.App.Shared.Extensions | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared.Extensions Classes DtoExtensions Provides extension methods for converting entity models to their corresponding DTO representations."
  },
  "api/UrlShortener.App.Shared.Models.RedirectLog.html": {
    "href": "api/UrlShortener.App.Shared.Models.RedirectLog.html",
    "title": "Class RedirectLog | UrlShortener",
    "summary": "Class RedirectLog Namespace UrlShortener.App.Shared.Models Assembly UrlShortener.App.Shared.dll Represents a log entry for a redirection event, including metadata about the request and client environment. public class RedirectLog Inheritance object RedirectLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DtoExtensions.ToDto(RedirectLog) Properties AccessedAt Gets or sets the timestamp when the redirect occurred (in UTC). public DateTime AccessedAt { get; set; } Property Value DateTime BrowserFamily Gets or sets the browser family (e.g., Chrome, Firefox). public string? BrowserFamily { get; set; } Property Value string ClientEngine Gets or sets the name of the rendering engine used by the client (e.g., Blink, Gecko). public string? ClientEngine { get; set; } Property Value string ClientName Gets or sets the name of the client software (e.g., Chrome, Safari). public string? ClientName { get; set; } Property Value string ClientType Gets or sets the type of the client (e.g., browser, app). public string? ClientType { get; set; } Property Value string DeviceBrand Gets or sets the brand of the user's device (e.g., Apple, Samsung). public string? DeviceBrand { get; set; } Property Value string DeviceModel Gets or sets the model of the user's device (e.g., iPhone 14, Galaxy S23). public string? DeviceModel { get; set; } Property Value string DeviceType Gets or sets the type of the user's device (e.g., smartphone, tablet, desktop). public string? DeviceType { get; set; } Property Value string Id Gets or sets the unique identifier of the redirect log entry. public int Id { get; set; } Property Value int IpAddress Gets or sets the IP address of the user who triggered the redirect. public string? IpAddress { get; set; } Property Value string OsFamily Gets or sets the operating system family (e.g., Windows, Linux, macOS). public string? OsFamily { get; set; } Property Value string OsName Gets or sets the name of the operating system (e.g., Windows, iOS). public string? OsName { get; set; } Property Value string OsVersion Gets or sets the version of the operating system. public string? OsVersion { get; set; } Property Value string UrlMapping Gets or sets the navigation property to the associated UrlMapping. public UrlMapping UrlMapping { get; set; } Property Value UrlMapping UrlMappingId Gets or sets the foreign key reference to the associated UrlMapping. public int UrlMappingId { get; set; } Property Value int UserAgent Gets or sets the raw user agent string from the user's browser. public string? UserAgent { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Models.UrlMapping.html": {
    "href": "api/UrlShortener.App.Shared.Models.UrlMapping.html",
    "title": "Class UrlMapping | UrlShortener",
    "summary": "Class UrlMapping Namespace UrlShortener.App.Shared.Models Assembly UrlShortener.App.Shared.dll Represents a shortened URL mapping, including the original URL, its short path, metadata, and related redirect logs. public class UrlMapping Inheritance object UrlMapping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DtoExtensions.ToDto(UrlMapping, HttpRequest) Properties CreatedAt Gets or sets the UTC timestamp when the mapping was created. public DateTime CreatedAt { get; set; } Property Value DateTime Id Gets or sets the unique identifier of the URL mapping. public int Id { get; set; } Property Value int LongUrl Gets or sets the original long URL that was shortened. public string LongUrl { get; set; } Property Value string Name Gets or sets an optional name or label for the mapping. public string? Name { get; set; } Property Value string Path Gets or sets the unique short path used for redirection. public string Path { get; set; } Property Value string RedirectLogs Gets or sets the collection of redirect logs associated with this URL mapping. public List<RedirectLog> RedirectLogs { get; set; } Property Value List<RedirectLog> User Gets or sets the identifier of the user who created the mapping (e.g., email address). public string? User { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Models.User.html": {
    "href": "api/UrlShortener.App.Shared.Models.User.html",
    "title": "Class User | UrlShortener",
    "summary": "Class User Namespace UrlShortener.App.Shared.Models Assembly UrlShortener.App.Shared.dll Represents a registered user in the system, including authentication credentials. public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user. Used as the login identifier. public string Email { get; set; } Property Value string Id Gets or sets the unique identifier of the user. public int Id { get; set; } Property Value int PasswordHash Gets or sets the hashed password of the user. public string PasswordHash { get; set; } Property Value string Salt Gets or sets the cryptographic salt used to hash the user's password. public string Salt { get; set; } Property Value string"
  },
  "api/UrlShortener.App.Shared.Models.html": {
    "href": "api/UrlShortener.App.Shared.Models.html",
    "title": "Namespace UrlShortener.App.Shared.Models | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared.Models Classes RedirectLog Represents a log entry for a redirection event, including metadata about the request and client environment. UrlMapping Represents a shortened URL mapping, including the original URL, its short path, metadata, and related redirect logs. User Represents a registered user in the system, including authentication credentials."
  },
  "api/UrlShortener.App.Shared.html": {
    "href": "api/UrlShortener.App.Shared.html",
    "title": "Namespace UrlShortener.App.Shared | UrlShortener",
    "summary": "Namespace UrlShortener.App.Shared Namespaces UrlShortener.App.Shared.Dto UrlShortener.App.Shared.Extensions UrlShortener.App.Shared.Models"
  },
  "api/UrlShortener.App.html": {
    "href": "api/UrlShortener.App.html",
    "title": "Namespace UrlShortener.App | UrlShortener",
    "summary": "Namespace UrlShortener.App Namespaces UrlShortener.App.Backend UrlShortener.App.Blazor UrlShortener.App.Shared"
  },
  "docs.html": {
    "href": "docs.html",
    "title": "Dokumentation | UrlShortener",
    "summary": "Dokumentation Dokumentation zur Projektarbeit im Fach \"Software-Qualitätssicherung\" an der TH Rosenheim (SoSe25) von Simon Liebers Der Aufbau dieser Dokumentation orientiert sich am offiziellen Arc42-Template 1. Einleitung Fachliche Anforderungen Bei der Anwendung handelt es sich um einen URL-Shortener mit Benutzerkonten. Nutzer:innen können sich mit E-Mail-Adresse und Passwort registrieren und anschließend über ein persönliches Dashboard kurze URLs erstellen. Die erstellten Kurz-URLs werden dem jeweiligen Nutzerkonto zugeordnet und können jederzeit wieder gelöscht werden. Ein zentrales Feature der Anwendung ist das Click Tracking: Wenn eine Person auf eine Kurz-URL klickt, werden Informationen wie IP-Adresse, Gerätetyp, Betriebssystem und Browser (aus dem User-Agent) in der Datenbank gespeichert. Die Nutzerinnen und Nutzer der Anwendung können für jede Kurz-URL eine detaillierte Auflistung dieser Zugriffsdaten einsehen. Zusätzlich wird eine Zählung angezeigt, wie oft eine URL bereits aufgerufen wurde. Qualitätsziele Die Anwendung verfolgt mehrere zentrale Qualitätsziele, die sowohl die Benutzerfreundlichkeit als auch die technische Umsetzung betreffen: Benutzerfreundlichkeit: Die Registrierung und Nutzung der Anwendung soll möglichst intuitiv und ohne technische Vorkenntnisse möglich sein. Sicherheit: Der Schutz personenbezogener Daten (z. B. E-Mail-Adressen und Tracking-Informationen) hat hohe Priorität. Die Datenübertragung erfolgt verschlüsselt. Wartbarkeit: Der Quellcode ist modular aufgebaut, um spätere Erweiterungen zu erleichtern. Performance: Die Anwendung soll auch bei vielen gleichzeitig geklickten Links zuverlässig und performant reagieren. Stakeholder Die wesentlichen Stakeholder dieses Projekts sind: Studierende des Moduls Software-Qualitätssicherung an der TH Rosenheim. Lehrende/Dozenten, die das Projekt im Kontext der Lehrveranstaltung begleiten und bewerten. 2. Beschränkungen Im Rahmen des Projekts galten folgende Einschränkungen und Rahmenbedingungen: Architekturvorgabe: Die Anwendung musste als verteiltes System umgesetzt werden, bestehend aus einem Frontend, einem Backend sowie einer persistenten Datenhaltung (Datenbank). Technologievorgabe: Es durften ausschließlich folgende Programmiersprachen verwendet werden: Java C# Python TypeScript Externe Abhängigkeiten: Eine externe API musste im Projekt integriert und genutzt werden. Zeitliche Einschränkung: Die Umsetzung des Projekts musste bis zur Präsentation am 24. Juni 2025 abgeschlossen sein. Quellcodeverwaltung: Als zentrales Repository für die Versionsverwaltung muss GitHub verwendet werden. 3. Kontext und Umfang Kontextdiagramm (Level 1) Das System ist ein Webservice mit direkter Interaktion durch Benutzer über den Browser. Die einzige externe Schnittstelle ist eine Third-Party-API zur Analyse von User-Agent-Strings. Externe Beteiligte: Endnutzer:innen: Interagieren über das Web-Frontend mit der Anwendung, z. B. zum Erstellen und Verwalten von Kurz-URLs. Externer Dienst – ApicAgent: Wird vom Backend genutzt, um die im User-Agent enthaltenen Informationen (z. B. Betriebssystem, Gerät, Browser) strukturiert zu analysieren und zu speichern. Containerdiagramm (Level 2) Das System besteht aus drei Haupt-Containern: 1. Web-Frontend (Blazor Server) Stellt die Benutzeroberfläche bereit. Verantwortlich für Benutzerinteraktion, URL-Verwaltung und Anzeige der Tracking-Daten. Kommuniziert per HTTP-REST mit dem Backend. 2. Backend (ASP.NET Core Web API) Beinhaltet die gesamte Geschäftslogik und Datenverarbeitung. Bietet REST-Endpunkte zur Nutzerregistrierung, URL-Verwaltung, Weiterleitung und Tracking. Ruft REST-API von ApicAgent auf zur Analyse des UserAgents des Nutzers. Datenbank (MS SQL Server) Persistiert Benutzerkonten, Kurz-URLs und Tracking-Informationen. Wird ausschließlich vom Backend angesprochen. Komponentendiagramm (Level 3) Backend-Komponenten: Frontend-Komponenten (Blazor Pages): 4. Lösungsstrategie Für die Umsetzung der Anwendung wurde bewusst ein konsistenter Technologie-Stack auf Basis von .NET gewählt. Diese Entscheidung basiert auf mehreren Vorteilen: Integrierte Entwicklung: Durch die Verwendung von Blazor Server für das Frontend und ASP.NET Core Web API für das Backend konnte die gesamte Anwendung innerhalb des .NET-Ökosystems entwickelt werden. Dies ermöglichte eine reibungslose Integration, eine einheitliche Sprache (C#) sowie eine effiziente Entwicklung. MSSQL: MSSQL als relationale Datenbank wurde gewählt, da es eine stabile und leistungsstarke Lösung für datenintensive Webanwendungen darstellt. Die gute Integration mit Entity Framework Core ermöglichte eine komfortable und zugleich flexible Datenzugriffsschicht. Entity Framework: Entity Framework Core wurde zur Abbildung des Datenmodells und für die Kommunikation mit der Datenbank verwendet. Dank der Code-First-Strategie können Datenbankmigrationen versioniert und automatisiert durchgeführt werden. Schichtmodell: Die Anwendung folgt einem klassischen Schichtenmodell, bei dem Präsentations-, Geschäftslogik- und Persistenzschicht klar voneinander getrennt sind. Dies erleichtert die Wartung und zukünftige Erweiterungen. 5. Baustein-Sicht Die Anwendung ist in klar getrennte Projektbereiche unterteilt, die die verschiedenen Aufgaben und Verantwortlichkeiten innerhalb des Systems abbilden. Dabei wurde auf eine modulare und wiederverwendbare Struktur geachtet, die sowohl im Backend als auch im Frontend eine saubere Trennung von Zuständigkeiten ermöglicht. Gemeinsame Bausteine Das Projekt UrlShortener.App.Shared enthält alle gemeinsam genutzten Modelle und DTOs, die zwischen Frontend und Backend ausgetauscht werden. Die zentrale Ablage dieser Strukturen ermöglicht eine typsichere Kommunikation innerhalb des .NET-Ökosystems. Backend Bausteine Das Backend besteht aus dem Projekt UrlShortener.App.Backend und ist in mehrere Module unterteilt: Controllers: Enthält die REST-Endpunkte für Authentifizierung (AuthController), Systemstatus (HealthCheckController), URL-Verwaltung (MappingsController) und Weiterleitung (RedirectController). Business: Implementiert die Geschäftslogik für Authentifizierung, Erstellung und Löschung von URLs, sowie das Tracking von Klicks inkl. API-Kommunikation mit ApicAgent. Models: Enthält die Models, die von der ApicAgent REST-API per HTTP-Request zur Verfügung gestellt werden. Extensions: Sammlung von statischen Hilfsklassen. Middleware: Implementierung eigener Middleware, um das Verhalten der Anwendung zentral zu steuern (Zum Beispiel, um ein Delay auf eingehende Requests anzuwenden, um Brute-Force Angriffe auf den Login ineffizient zu machen). Frontend-Bausteine Das Frontend besteht aus zwei Projekten: Das Projekt UrlShortener.App.Blazor stellt die Anwendung bereit und fungiert als Host für die Blazor Server-Komponenten. Die eigentlichen UI- und Interaktionslogiken befinden sich im Projekt UrlShortener.App.Blazor.Client, unterteilt in folgende Bausteine: API: Wrapper für die Kommunikation mit dem Backend via HTTP. Business: Client-seitige Geschäftslogik zur Verwaltung von URLs und Anzeige der Tracking-Daten. Components: Wiederverwendbare UI-Komponenten wie Formulare, Tabellen oder Dialoge. Extensions: Erweiterungsmethoden und Hilfsfunktionen für die UI oder Datenverarbeitung. 6. Runtime-Sicht Die Runtime-Sicht beschreibt typische Abläufe innerhalb des Systems zur Laufzeit. Dabei werden die Interaktionen zwischen Nutzer, Frontend, Backend, Datenbank und externen APIs dargestellt. Im Folgenden werden zwei zentrale Szenarien der Anwendung beispielhaft beschrieben. Szenario 1: Nutzer erstellt eine neue Kurz-URL Der angemeldete Nutzer öffnet die HomePage im Blazor-Frontend. Über ein Formular gibt er eine Lange URL und einen Titel ein und klickt auf „Submit“. Das Frontend ruft den REST-Endpunkt /api/mappings/create im MappingsController des Backends per POST-Request mit den eingegeben Daten auf. Das Backend validiert die Eingabe und generiert eine eindeutige Kurz-URL. Die Lange URL, die generierte Kurz-URL, der Timestamp, der Titel und die Benutzer-ID werden in der Datenbank gespeichert. Die neue URL wird dem Benutzer im Frontend angezeigt und zur Übersichtsliste hinzugefügt. Szenario 2: Ein Dritter klickt auf eine Kurz-URL Eine Person ruft eine zuvor generierte Kurz-URL im Browser auf. Der Request erreicht den RedirectController, welcher die Kurz-URL durch den Pfad mit der Datenbank abgleicht. Wenn ein Mapping gefunden wird: Das System extrahiert die IP-Adresse und den User-Agent des Clients aus dem Request-Header. Der User-Agent wird über die externe ApicAgent-API per GET-Request analysiert, um Gerät, OS und Browser zu bestimmen. Ein neuer Tracking-Eintrag wird in der Datenbank gespeichert (inkl. Zeitpunkt, IP, Gerätedaten etc.). Der Client wird mit einem HTTP-Redirect (Status 302) zur Lang-URL weitergeleitet. Falls kein Mapping existiert, wird eine 404-Fehlermeldung zurückgegeben. Beide Szenarien zeigen, wie die verschiedenen Systemkomponenten zusammenarbeiten, um Kernfunktionalitäten wie URL-Erstellung und Tracking performant und sicher umzusetzen. 7. Deployment-Sicht Die Anwendung wird containerisiert ausgeliefert und über eine zentrale docker-compose-Konfiguration gestartet. Sie besteht aus zwei Hauptdiensten – Backend und Frontend – die jeweils in einem eigenen Docker-Container laufen. Beide Images werden automatisch via GitHub Actions gebaut und mit der jeweils aktuellen Version veröffentlicht. Containerisierung Backend-Container: Basierend auf dem offiziellen .NET 9.0 ASP.NET-Image. Enthält die REST-API sowie die Geschäftslogik. Wird über Port 6060 bereitgestellt. Nutzt eine mehrstufige Build-Pipeline (Restore, Build, Publish), um ein Image zu erzeugen. Frontend-Container: Ebenfalls basierend auf dem .NET 9.0 ASP.NET-Image. Hostet die Blazor-Komponenten. Stellt die Webanwendung über Ports 8080 und 8081 zur Verfügung. Build & Deployment Buildprozess über GitHub Actions: Bei jeder Änderung im Repository wird automatisch ein neuer Build-Workflow ausgelöst. Dabei werden beide Images erzeugt, getaggt und veröffentlicht. Docker-Compose-Konfiguration: Alle Dienste werden konsistent über docker-compose up gestartet. Die Kommunikation zwischen Frontend und Backend erfolgt über ein definiertes Container-Netzwerk. Lokale Entwicklung Für die lokale Ausführung genügt: docker-compose up --build Die Anwendung ist anschließend unter den definierten Ports erreichbar. Backend und Frontend laufen unabhängig, aber koordiniert im selben Container-Netzwerk. 8. Querschnittskonzepte Sicherheit Die Anwendung verwendet ein tokenbasiertes Authentifizierungssystem auf Basis von JWT (JSON Web Token). Nach erfolgreicher Registrierung oder Anmeldung erhält der Client ein signiertes Token, das bei allen nachfolgenden REST-Requests im HTTP-Header mitgesendet wird. Durch dieses Verfahren wird sichergestellt, dass nur authentifizierte Nutzer:innen Zugriff auf geschützte Ressourcen (z. B. eigene URLs oder Tracking-Daten) erhalten. Auf Serverseite wird jedes Token geprüft, bevor ein API-Endpunkt verarbeitet wird. Dies gewährleistet eine sichere und skalierbare Zugriffskontrolle ohne die Notwendigkeit einer serverseitigen Session-Verwaltung. Zusätzliche Sicherheitsmaßnahmen: HTTPS-Verschlüsselung zur Absicherung der Kommunikation. Validierung von Eingaben zur Vermeidung von Injection-Angriffen. CORS-Konfiguration, um nur erlaubte Ursprünge zu akzeptieren. Während der Entwicklung werden zur Vereinfachung alle Ursprünge erlaubt. Im Produktiven Einsatz sollten erlaubte Quellen noch explizit konfiguriert werden, um eine maximale Sicherheit zu gewährleisten. User Interface Die Benutzeroberfläche wurde mit Blazor Server entwickelt und nutzt Tailwind CSS als Styling-Framework. Tailwind ermöglicht ein konsistentes, modernes und responsives Design durch Utility-Klassen direkt im Markup. Das Resultat ist eine klar strukturierte, leicht anpassbare Oberfläche mit einem schlanken und professionellen Look. Die Anwendung besteht aus modular aufgebauten Komponenten, z. B. für Formulare, Tabellen, Buttons und Dialoge. Diese wurden als wiederverwendbare Blazor-Komponenten organisiert und sorgen für ein einheitliches Look-and-Feel innerhalb der gesamten Anwendung. User Experience Besonderer Wert wurde auf eine intuitive und fokussierte Nutzererfahrung gelegt. Die Oberfläche ist minimalistisch gehalten und lenkt die Aufmerksamkeit auf die Kernfunktionen: URLs kürzen, verwalten und analysieren. Dank Tailwind CSS konnten UI-Elemente wie Formulareingaben, Fehlermeldungen oder Dialoge benutzerfreundlich gestaltet werden. Die Reaktivität und kurze Ladezeiten durch Blazor Server sorgen für ein flüssiges Nutzererlebnis ohne spürbare Wartezeiten. Weitere UX-Merkmale: Eingabevalidierung direkt beim Tippen. Modale Dialoge für Trackingdaten, damit der Seitenkontext erhalten bleibt. Feedback-Mechanismen nach Nutzeraktionen (z. B. Toast-Meldungen nach erfolgreichem Speichern oder Löschen). Das gesamte UI/UX-Design zielt darauf ab, die Nutzung der Anwendung auch für technisch weniger erfahrene Anwender:innen so einfach und angenehm wie möglich zu machen. 9. Architekturentscheidungen Die wichtigsten Entscheidungen mit Auswirkungen auf die Architektur wurden als architecture decision records (ADR) dokumentiert. ADR 1: Entscheidung für eigenen URL-Shortener Status: Entschieden Datum: 2025-03-18 Entscheidung: Ich habe mich entschieden, den URL-Shortener selbst zu implementieren, anstatt auf einen externen Dienst zurückzugreifen. Alle Kurz-URLs werden in einer eigenen Datenbank gespeichert und können von den Nutzern verwaltet werden. Begründung: Volle Kontrolle über die URL-Verwaltung und gespeicherte Daten. Möglichkeit zur Integration zusätzlicher Funktionen wie Tracking und Analytics. Benutzer können personalisierte Kurzlinks erstellen. Flexibilität für zukünftige Erweiterungen. Alternativen: Nutzung externer Dienste wie Bitly oder TinyURL. Vorteile: Schnellere Implementierung, keine eigene Infrastruktur nötig. Nachteile: Eingeschränkte Anpassbarkeit, Abhängigkeit von Dritten, evtl. zusätzliche Kosten. ADR 2: Entscheidung für JWT-Authentifizierung Status: Entschieden Datum: 2025-03-18 Entscheidung: Ich verwende JSON Web Tokens (JWT) zur Authentifizierung und Autorisierung der Nutzer. Das Token wird im lokalen Speicher des Browsers abgelegt und bei jedem Request an das Backend übermittelt. Begründung: JWTs sind leichtgewichtig und effizient. Ermöglichen zustandslose Authentifizierung (keine Session-Daten auf dem Server nötig). Weit verbreitet, gut dokumentiert und einfach in Blazor und ASP.NET Core integrierbar. Tokenbasierte Authentifizierung ist sicher und skalierbar. Alternativen: Session-basierte Authentifizierung. Vorteile: Einfach umsetzbar für kleine Anwendungen. Nachteile: Server benötigt Speicher für Sessions, schlechter skalierbar. ADR 3: Entscheidung für SQL Server als Datenbank Status: Entschieden Datum: 2025-03-19 Entscheidung: Ich verwende Microsoft SQL Server als relationale Datenbank für das Backend. Diese Wahl bietet eine zuverlässige Grundlage für Transaktionen und komplexe Abfragen im Zusammenhang mit Benutzer- und URL-Daten. Begründung: SQL Server ist stabil, performant und unterstützt ACID-Transaktionen. Nahtlose Integration mit Entity Framework Core. Persönliche Erfahrung im Umgang mit SQL Server – keine Einarbeitung nötig. Alternativen: Nutzung von NoSQL-Datenbanken wie MongoDB. Vorteile: Besser für unstrukturierte Daten, horizontale Skalierung möglich. Nachteile: Komplexe Abfragen schwieriger, keine konsistenten Transaktionen. ADR 4: Entscheidung für Blazor als Frontend-Technologie Status: Entschieden Datum: 2025-03-19 Entscheidung: Ich habe mich für Blazor als Frontend-Framework entschieden, da es die Entwicklung interaktiver Webanwendungen in C# ermöglicht und die Wiederverwendung von Code zwischen Frontend und Backend unterstützt. Begründung: C# kann sowohl im Frontend als auch im Backend verwendet werden. Gute Integration mit ASP.NET Core. Möglichkeit, bestehende .NET-Bibliotheken zu verwenden. Kein Wechsel zu JavaScript nötig – reduziert Komplexität. Alternativen: Einsatz von React oder Angular. Vorteile: Große Community, viele UI-Bibliotheken. Nachteile: JavaScript notwendig, keine direkte .NET-Integration. ADR 5: Entscheidung für Blazor Server statt Blazor WebAssembly Status: Entschieden Datum: 2025-03-20 Entscheidung: Ich habe mich für Blazor Server als Hosting-Modell entschieden. Die Logik wird vollständig serverseitig ausgeführt, und der Client kommuniziert per SignalR-Verbindung mit dem Server. Begründung: Höhere Sicherheit, da keine API-Requests oder Logik im Browser sichtbar sind. Schnellere Ladezeiten, da keine WebAssembly-Runtime benötigt wird. Alternativen: Blazor WebAssembly Vorteile: Vollständig clientseitig, offlinefähig. Nachteile: Logik im Browser einsehbar, längere Ladezeit. 10. Qualität Nicht-funktionale Qualitätsanforderungen nach ISO 25010 Sicherheit Authentifizierung & Autorisierung: Zugriff auf geschützte Bereiche ist nur nach Login mit gültigem JWT-Token möglich. Datenverschlüsselung: Die Kommunikation zwischen Client und Server erfolgt über HTTPS. Input-Validierung: Sämtliche Benutzereingaben werden serverseitig validiert, um Angriffe wie SQL-Injection zu verhindern. Trennung der Rollen: Nicht angemeldete Benutzer haben keinerlei Zugriff auf Nutzerdaten oder Kurz-URLs. Effizienz und Performanz Schnelle Antwortzeiten durch serverseitiges Rendering mit Blazor Server. Vermeidung von unnötigen Datenbankabfragen. Asynchrone Verarbeitung von Tracking-Informationen zur Entkopplung vom Benutzerfluss (Weiterleitung erfolgt sofort, Tracking im Hintergrund). Wartbarkeit Wartbarkeit und Erweiterbarkeit: Die Anwendung ist in modularen Bausteinen organisiert (nach Schichtenmodell und klarer Trennung von Concerns). Gemeinsame Modelle liegen in einem Shared-Projekt, sodass Änderungen zentral vorgenommen werden können. Wirtschaftlichkeit: Durch die einheitliche Verwendung von .NET und C# über alle Ebenen hinweg kann Entwicklungs- und Wartungsaufwand minimiert werden. Zudem ist durch Dockerisierung ein einfaches Rollout möglich. Benutzbarkeit Benutzerfreundlichkeit: Die Oberfläche ist minimalistisch und intuitiv gehalten. Tailwind CSS sorgt für ein einheitliches, modernes Design. Wichtige Funktionen wie das Kürzen und Löschen von URLs oder das Anzeigen von Trackingdaten sind mit wenigen Klicks erreichbar. Kompatibilität Interoperabilität und Integration: Die Anwendung nutzt standardisierte HTTP-REST-Schnittstellen und kann damit auch problemlos von anderen Systemen angesprochen oder erweitert werden. Funktionale Eignung: Die Kernfunktionen (Erstellen, Verwalten und Auswerten von Kurz-URLs) sind vollständig implementiert und entsprechen den Anforderungen. Portabilität: Die Anwendung läuft containerisiert über Docker und ist damit unabhängig vom Betriebssystem oder der Infrastruktur einfach auf verschiedenen Umgebungen deploybar. Zuverlässigkeit: Das System erkennt fehlerhafte Eingaben und bietet dem Benutzer entsprechendes Feedback. 11. Qualitätssichernde Maßnahmen und Tests Die Qualität der Anwendung wurde durch verschiedene Testarten, automatisierte Analysen und CI sichergestellt. Der Fokus lag dabei sowohl auf funktionaler Korrektheit als auch auf nicht-funktionalen Aspekten wie Performance und Sicherheit. Unittests (Backend) Im Projekt UrlShortener.Test.Backend wurden umfassende Unit-Tests für die Kernlogik des Backends erstellt. Dabei wurden u. a. folgende Bereiche abgedeckt: Validierung von URL-Eingaben Erzeugung und Speicherung von Kurz-URLs Authentifizierungs-Logik (z. B. Token-Handling) Trennung der Tests nach Modulen (Mapping, Auth, Tracking) Unittests (Frontend) Im Projekt UrlShortener.Test.Frontend wurden Unit-Tests für die Frontend-Komponenten durchgeführt. Dabei lag der Fokus auf: Validierung von Eingaben in Formularen UI-Komponentenverhalten Funktionalität der Geschäftslogik Integrationstests Das Projekt UrlShortener.Test.Backend enthält auch Integrationstests, die die REST-API testen. Es wurden u. a. getestet: Registrierung und Login Erstellen und Löschen von Kurz-URLs Zugriffsschutz über JWT Rückgabeverhalten bei fehlerhaften Requests Penetration-Tests Im Projekt UrlShortener.Test.End2End wurden gezielt Sicherheitstests (PenTests) implementiert, u. a. um zu prüfen: Unberechtigter Zugriff auf geschützte Ressourcen Manipulation von JWTs Eingabe von potenziell schädlichem Code (Injection-Angriffe) Verhalten bei abgelaufenen oder ungültigen Tokens End2End-Tests Ebenfalls in UrlShortener.Test.End2End befinden sich die End2End-Tests, mit denen komplette Nutzungsflüsse simuliert und geprüft werden. Dazu werden sowohl Backend, Frontend und eine In-Memory-Datenbank gestartet und mittels PlayWright durch das UI navigiert. Diese Tests laufen automatisiert in der CI-Pipeline (Headless) und prüfen: Funktionale Korrektheit des Zusammenspiels zwischen Frontend und Backend Darstellung und Zustand der UI nach typischen Aktionen Rückmeldungen bei Erfolgen und Fehlern Last-Tests Die Anwendung wurde zudem mit Lasttests auf ihre Stabilität unter erhöhter Benutzeraktivität geprüft. Dabei wurde unter anderem simuliert: Massenerstellung von URLs Verhalten von Login/Registrierung unter Last Statische Codeanalyse Die Anwendung wird mithilfe von SonarQube regelmäßig auf Code Smells, Security Vulnerabilities, Duplikate und Testabdeckung überprüft. Die SonarQube-Auswertungen sind in den CI-Workflow integriert und liefern konkrete Hinweise zur Codequalität. Analyse von Abhängigkeiten Zusätzlich zu den Penetration-Tests und der statischen Codeanalyse wurde ein automatisierter OWASP Dependency Check durchgeführt. Dabei wurden sämtliche verwendeten Bibliotheken auf bekannte Schwachstellen geprüft (CVE-Datenbank). Der Dependency Check wurde in den CI-Prozess integriert, sodass Sicherheitsrisiken in Drittanbieterpaketen frühzeitig erkannt und adressiert werden können. Ziel ist es, die Angriffsfläche durch unsichere Abhängigkeiten zu minimieren und aktuelle Sicherheitsstandards einzuhalten."
  },
  "index.html": {
    "href": "index.html",
    "title": "Willkommen beim UrlShortener | UrlShortener",
    "summary": "Willkommen beim UrlShortener Diese Dokumentation beschreibt das Projekt URL-Shortener, das im Rahmen des Moduls Software-Qualitätssicherung (SQS) an der Technischen Hochschule Rosenheim im Sommersemester 2025 (SoSe25) umgesetzt wurde. Ziel des Projekts war es, eine moderne Webanwendung zur Erstellung und Verwaltung von Kurz-URLs zu entwickeln – inklusive Benutzerregistrierung, Login, Tracking von Link-Klicks und einer übersichtlichen Benutzeroberfläche. Die Anwendung wurde vollständig mit .NET 9, Blazor Server und Entity Framework Core entwickelt und ist containerisiert mit Docker. Neben den funktionalen Anforderungen lag ein besonderer Fokus auf Qualität, Testbarkeit und Wartbarkeit des Systems. Inhalt \uD83E\uDDED Verwendung Eine Anleitung zur Installation, Ausführung und Nutzung der Anwendung. \uD83D\uDCD0 Architekturdokumentation (arc42) Detaillierte Beschreibung der Softwarearchitektur mit C4-Modellen, Entwurfsentscheidungen und Qualitätssicherungsmaßnahmen."
  },
  "usage.html": {
    "href": "usage.html",
    "title": "Verwendung | UrlShortener",
    "summary": "Verwendung Vorraussetzungen Docker Anwendung starten Repository klonen. Stelle sicher, dass Docker auf deinem System installiert ist. Baue und starte das Projekt mit Docker Compose: docker-compose up --build Dadurch werden sowohl der Frontend- als auch der Backend-Service gestartet. Du kannst die Anwendung unter http://localhost:1010 (oder dem von dir konfigurierten Port) aufrufen. Anwendung stoppen Um die Container zu stoppen: docker-compose down"
  }
}